
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 24 21:42:46 CST 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 24 21:42:46 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\002\000\002\002\012\000\002\004\011" +
    "\000\002\017\004\000\002\017\003\000\002\006\014\000" +
    "\002\006\014\000\002\006\011\000\002\005\011\000\002" +
    "\005\010\000\002\020\004\000\002\020\003\000\002\034" +
    "\004\000\002\034\003\000\002\033\004\000\002\033\003" +
    "\000\002\043\004\000\002\043\003\000\002\044\004\000" +
    "\002\044\003\000\002\045\004\000\002\045\003\000\002" +
    "\046\004\000\002\046\003\000\002\007\011\000\002\007" +
    "\011\000\002\007\011\000\002\007\011\000\002\007\010" +
    "\000\002\007\011\000\002\007\011\000\002\007\011\000" +
    "\002\007\010\000\002\007\010\000\002\007\005\000\002" +
    "\021\004\000\002\021\003\000\002\035\011\000\002\035" +
    "\011\000\002\035\011\000\002\035\011\000\002\035\010" +
    "\000\002\035\011\000\002\035\011\000\002\035\011\000" +
    "\002\035\010\000\002\035\010\000\002\035\005\000\002" +
    "\047\004\000\002\047\003\000\002\023\004\000\002\023" +
    "\003\000\002\024\011\000\002\024\012\000\002\050\004" +
    "\000\002\050\003\000\002\010\004\000\002\010\003\000" +
    "\002\011\012\000\002\011\011\000\002\025\004\000\002" +
    "\025\003\000\002\026\012\000\002\026\011\000\002\026" +
    "\012\000\002\026\011\000\002\026\011\000\002\026\010" +
    "\000\002\026\011\000\002\026\010\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\027\002\000\002\030\003\000\002\030" +
    "\002\000\002\012\004\000\002\012\003\000\002\036\006" +
    "\000\002\036\010\000\002\036\006\000\002\036\006\000" +
    "\002\036\006\000\002\036\006\000\002\036\006\000\002" +
    "\015\004\000\002\015\003\000\002\041\006\000\002\041" +
    "\010\000\002\041\006\000\002\041\006\000\002\041\006" +
    "\000\002\041\006\000\002\041\006\000\002\013\004\000" +
    "\002\013\003\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\014\004\000\002\014\003\000\002\040\006" +
    "\000\002\040\006\000\002\040\006\000\002\040\006\000" +
    "\002\040\006\000\002\040\006\000\002\031\004\000\002" +
    "\031\003\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\032\006\000\002\032\006\000\002\016\004" +
    "\000\002\016\003\000\002\042\006\000\002\042\006\000" +
    "\002\042\006\000\002\042\006\000\002\042\006\000\002" +
    "\042\010\000\002\022\003\000\002\022\003\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\010\002\ufffe\003\004\005\007\001\002\000" +
    "\010\002\ufffe\003\004\005\007\001\002\000\004\002\000" +
    "\001\002\000\004\002\u01c4\001\002\000\004\033\010\001" +
    "\002\000\004\004\011\001\002\000\004\005\012\001\002" +
    "\000\004\064\u01a3\001\002\000\004\005\015\001\002\000" +
    "\004\005\u01a0\001\002\000\004\023\016\001\002\000\004" +
    "\004\017\001\002\000\004\005\021\001\002\000\004\005" +
    "\ufff3\001\002\000\032\006\040\020\026\022\025\026\030" +
    "\027\032\030\036\031\027\035\031\041\033\051\u019e\057" +
    "\037\060\034\001\002\000\004\005\024\001\002\000\004" +
    "\005\ufff4\001\002\000\032\006\040\020\026\022\025\026" +
    "\030\027\032\030\036\031\027\035\031\041\033\051\035" +
    "\057\037\060\034\001\002\000\016\004\137\074\132\102" +
    "\141\103\133\104\135\105\136\001\002\000\016\004\137" +
    "\074\132\102\141\103\133\104\135\105\136\001\002\000" +
    "\016\004\137\074\132\102\141\103\133\104\135\105\136" +
    "\001\002\000\020\004\320\034\322\074\313\102\324\103" +
    "\314\104\317\105\321\001\002\000\022\004\253\032\243" +
    "\034\254\074\244\102\255\103\246\104\251\105\252\001" +
    "\002\000\016\004\137\074\132\102\141\103\133\104\135" +
    "\105\136\001\002\000\020\004\205\032\176\074\177\102" +
    "\206\103\201\104\203\105\204\001\002\000\004\004\175" +
    "\001\002\000\004\004\174\001\002\000\016\004\137\074" +
    "\132\102\141\103\133\104\135\105\136\001\002\000\016" +
    "\004\137\074\132\102\141\103\133\104\135\105\136\001" +
    "\002\000\022\004\054\032\042\034\052\074\043\102\055" +
    "\103\044\104\050\105\053\001\002\000\022\004\uff9d\032" +
    "\uff9d\034\uff9d\074\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d" +
    "\001\002\000\004\072\126\001\002\000\004\072\123\001" +
    "\002\000\004\072\120\001\002\000\020\032\042\034\052" +
    "\074\043\102\055\103\044\104\050\105\053\001\002\000" +
    "\004\004\uffaf\001\002\000\006\005\uffb1\075\111\001\002" +
    "\000\004\072\103\001\002\000\004\004\102\001\002\000" +
    "\004\072\075\001\002\000\004\072\072\001\002\000\006" +
    "\005\uffed\075\uffed\001\002\000\004\072\056\001\002\000" +
    "\016\011\uffb3\012\uffb3\013\uffb3\071\uffb3\076\057\100\uffb3" +
    "\001\002\000\016\005\uffb4\011\uffb4\012\uffb4\013\uffb4\071" +
    "\uffb4\100\uffb4\001\002\000\014\011\062\012\063\013\065" +
    "\071\061\100\064\001\002\000\004\076\071\001\002\000" +
    "\004\076\070\001\002\000\004\076\067\001\002\000\022" +
    "\004\uffaa\032\uff99\034\uff99\074\uff99\102\uff99\103\uff99\104" +
    "\uff99\105\uff99\001\002\000\004\076\066\001\002\000\016" +
    "\005\uffb6\011\uffb6\012\uffb6\013\uffb6\071\uffb6\100\uffb6\001" +
    "\002\000\016\005\uffb5\011\uffb5\012\uffb5\013\uffb5\071\uffb5" +
    "\100\uffb5\001\002\000\016\005\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\071\uffb8\100\uffb8\001\002\000\016\005\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\071\uffb7\100\uffb7\001\002\000\004\077" +
    "\073\001\002\000\004\100\074\001\002\000\022\004\uffab" +
    "\032\uff9a\034\uff9a\074\uff9a\102\uff9a\103\uff9a\104\uff9a\105" +
    "\uff9a\001\002\000\004\077\076\001\002\000\004\007\077" +
    "\001\002\000\004\010\100\001\002\000\004\100\101\001" +
    "\002\000\004\004\uffad\001\002\000\006\005\uffee\075\uffee" +
    "\001\002\000\010\066\106\067\105\070\107\001\002\000" +
    "\004\100\110\001\002\000\004\100\uff7e\001\002\000\004" +
    "\100\uff7f\001\002\000\004\100\uff7d\001\002\000\022\004" +
    "\uffa8\032\uff97\034\uff97\074\uff97\102\uff97\103\uff97\104\uff97" +
    "\105\uff97\001\002\000\004\005\uffb2\001\002\000\004\005" +
    "\113\001\002\000\004\062\114\001\002\000\004\004\115" +
    "\001\002\000\004\005\uffe5\001\002\000\022\004\uff9e\032" +
    "\uff9e\034\uff9e\074\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e" +
    "\001\002\000\004\004\uffb0\001\002\000\016\011\uffb3\012" +
    "\uffb3\013\uffb3\071\uffb3\076\057\100\uffb3\001\002\000\014" +
    "\011\062\012\063\013\065\071\061\100\122\001\002\000" +
    "\022\004\uffa9\032\uff98\034\uff98\074\uff98\102\uff98\103\uff98" +
    "\104\uff98\105\uff98\001\002\000\004\077\124\001\002\000" +
    "\004\100\125\001\002\000\022\004\uffac\032\uff9b\034\uff9b" +
    "\074\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\001\002\000" +
    "\004\075\127\001\002\000\004\100\130\001\002\000\022" +
    "\004\uffae\032\uff9c\034\uff9c\074\uff9c\102\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\001\002\000\016\005\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\071\uffb3\076\057\001\002\000\004\072\160\001" +
    "\002\000\004\072\155\001\002\000\016\004\uff8d\074\uff8d" +
    "\102\uff8d\103\uff8d\104\uff8d\105\uff8d\001\002\000\004\072" +
    "\152\001\002\000\004\072\147\001\002\000\020\005\uffef" +
    "\011\uffef\012\uffef\013\uffef\071\uffef\075\uffef\076\uffef\001" +
    "\002\000\016\004\146\074\132\102\141\103\133\104\135" +
    "\105\136\001\002\000\004\072\142\001\002\000\016\011" +
    "\uffb3\012\uffb3\013\uffb3\071\uffb3\076\057\100\uffb3\001\002" +
    "\000\014\011\062\012\063\013\065\071\061\100\144\001" +
    "\002\000\016\004\uff8a\074\uff8a\102\uff8a\103\uff8a\104\uff8a" +
    "\105\uff8a\001\002\000\016\004\uff8e\074\uff8e\102\uff8e\103" +
    "\uff8e\104\uff8e\105\uff8e\001\002\000\020\005\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\071\ufff0\075\ufff0\076\ufff0\001\002\000" +
    "\004\077\150\001\002\000\004\100\151\001\002\000\016" +
    "\004\uff8b\074\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\001" +
    "\002\000\010\066\106\067\105\070\107\001\002\000\004" +
    "\100\154\001\002\000\016\004\uff88\074\uff88\102\uff88\103" +
    "\uff88\104\uff88\105\uff88\001\002\000\016\011\uffb3\012\uffb3" +
    "\013\uffb3\071\uffb3\076\057\100\uffb3\001\002\000\014\011" +
    "\062\012\063\013\065\071\061\100\157\001\002\000\016" +
    "\004\uff89\074\uff89\102\uff89\103\uff89\104\uff89\105\uff89\001" +
    "\002\000\004\077\161\001\002\000\004\100\162\001\002" +
    "\000\016\004\uff8c\074\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\001\002\000\014\005\164\011\062\012\063\013\065" +
    "\071\061\001\002\000\004\046\165\001\002\000\004\004" +
    "\166\001\002\000\004\005\uffdf\001\002\000\006\005\uffb1" +
    "\075\111\001\002\000\004\005\171\001\002\000\004\047" +
    "\172\001\002\000\004\004\173\001\002\000\004\005\uffe1" +
    "\001\002\000\004\005\ufff6\001\002\000\004\005\uffdc\001" +
    "\002\000\004\072\233\001\002\000\004\072\230\001\002" +
    "\000\006\005\uffb1\075\111\001\002\000\004\072\221\001" +
    "\002\000\020\004\220\032\176\074\177\102\206\103\201" +
    "\104\203\105\204\001\002\000\004\072\215\001\002\000" +
    "\004\072\212\001\002\000\006\005\uffe9\075\uffe9\001\002" +
    "\000\004\072\207\001\002\000\016\011\uffb3\012\uffb3\013" +
    "\uffb3\071\uffb3\076\057\100\uffb3\001\002\000\014\011\062" +
    "\012\063\013\065\071\061\100\211\001\002\000\020\004" +
    "\uff99\032\uff99\074\uff99\102\uff99\103\uff99\104\uff99\105\uff99" +
    "\001\002\000\004\077\213\001\002\000\004\100\214\001" +
    "\002\000\020\004\uff9a\032\uff9a\074\uff9a\102\uff9a\103\uff9a" +
    "\104\uff9a\105\uff9a\001\002\000\010\066\106\067\105\070" +
    "\107\001\002\000\004\100\217\001\002\000\020\004\uff97" +
    "\032\uff97\074\uff97\102\uff97\103\uff97\104\uff97\105\uff97\001" +
    "\002\000\006\005\uffea\075\uffea\001\002\000\016\011\uffb3" +
    "\012\uffb3\013\uffb3\071\uffb3\076\057\100\uffb3\001\002\000" +
    "\014\011\062\012\063\013\065\071\061\100\223\001\002" +
    "\000\020\004\uff98\032\uff98\074\uff98\102\uff98\103\uff98\104" +
    "\uff98\105\uff98\001\002\000\004\005\225\001\002\000\004" +
    "\063\226\001\002\000\004\004\227\001\002\000\004\005" +
    "\uffe3\001\002\000\004\077\231\001\002\000\004\100\232" +
    "\001\002\000\020\004\uff9b\032\uff9b\074\uff9b\102\uff9b\103" +
    "\uff9b\104\uff9b\105\uff9b\001\002\000\004\075\234\001\002" +
    "\000\004\100\235\001\002\000\020\004\uff9c\032\uff9c\074" +
    "\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\001\002\000\006" +
    "\005\uffb1\075\111\001\002\000\004\005\240\001\002\000" +
    "\004\042\241\001\002\000\004\004\242\001\002\000\004" +
    "\005\uffe6\001\002\000\004\072\310\001\002\000\004\072" +
    "\305\001\002\000\022\004\uffa6\032\uffa6\034\uffa6\074\uffa6" +
    "\102\uffa6\103\uffa6\104\uffa6\105\uffa6\001\002\000\004\072" +
    "\302\001\002\000\006\005\uffb1\075\111\001\002\000\022" +
    "\004\275\032\243\034\254\074\244\102\255\103\246\104" +
    "\251\105\252\001\002\000\004\072\271\001\002\000\004" +
    "\072\266\001\002\000\006\005\uffeb\075\uffeb\001\002\000" +
    "\004\072\261\001\002\000\004\072\256\001\002\000\016" +
    "\011\uffb3\012\uffb3\013\uffb3\071\uffb3\076\057\100\uffb3\001" +
    "\002\000\014\011\062\012\063\013\065\071\061\100\260" +
    "\001\002\000\022\004\uffa1\032\uffa1\034\uffa1\074\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\001\002\000\004\077\262" +
    "\001\002\000\004\007\263\001\002\000\004\010\264\001" +
    "\002\000\004\100\265\001\002\000\022\004\uffa4\032\uffa4" +
    "\034\uffa4\074\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\001" +
    "\002\000\004\077\267\001\002\000\004\100\270\001\002" +
    "\000\022\004\uffa2\032\uffa2\034\uffa2\074\uffa2\102\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\001\002\000\010\066\106\067\105" +
    "\070\107\001\002\000\004\100\273\001\002\000\022\004" +
    "\uff9f\032\uff9f\034\uff9f\074\uff9f\102\uff9f\103\uff9f\104\uff9f" +
    "\105\uff9f\001\002\000\022\004\uffa7\032\uffa7\034\uffa7\074" +
    "\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\001\002\000\006" +
    "\005\uffec\075\uffec\001\002\000\004\005\277\001\002\000" +
    "\004\044\300\001\002\000\004\004\301\001\002\000\004" +
    "\005\uffe4\001\002\000\016\011\uffb3\012\uffb3\013\uffb3\071" +
    "\uffb3\076\057\100\uffb3\001\002\000\014\011\062\012\063" +
    "\013\065\071\061\100\304\001\002\000\022\004\uffa0\032" +
    "\uffa0\034\uffa0\074\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0" +
    "\001\002\000\004\077\306\001\002\000\004\100\307\001" +
    "\002\000\022\004\uffa3\032\uffa3\034\uffa3\074\uffa3\102\uffa3" +
    "\103\uffa3\104\uffa3\105\uffa3\001\002\000\004\075\311\001" +
    "\002\000\004\100\312\001\002\000\022\004\uffa5\032\uffa5" +
    "\034\uffa5\074\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\001" +
    "\002\000\004\072\u0116\001\002\000\004\072\u0113\001\002" +
    "\000\020\004\uff86\034\uff86\074\uff86\102\uff86\103\uff86\104" +
    "\uff86\105\uff86\001\002\000\020\004\u0112\034\322\074\313" +
    "\102\324\103\314\104\317\105\321\001\002\000\004\072" +
    "\u010e\001\002\000\004\005\uffe7\001\002\000\004\072\u010b" +
    "\001\002\000\004\072\u0106\001\002\000\004\005\333\001" +
    "\002\000\004\072\325\001\002\000\016\011\uffb3\012\uffb3" +
    "\013\uffb3\071\uffb3\076\057\100\uffb3\001\002\000\014\011" +
    "\062\012\063\013\065\071\061\100\327\001\002\000\020" +
    "\004\uff83\034\uff83\074\uff83\102\uff83\103\uff83\104\uff83\105" +
    "\uff83\001\002\000\004\053\u0104\001\002\000\004\005\uffcb" +
    "\001\002\000\004\005\u0103\001\002\000\006\040\334\053" +
    "\uffcd\001\002\000\020\004\343\074\335\101\337\102\345" +
    "\103\340\104\342\105\344\001\002\000\004\072\377\001" +
    "\002\000\020\004\372\074\335\101\337\102\345\103\340" +
    "\104\342\105\344\001\002\000\004\072\366\001\002\000" +
    "\004\072\363\001\002\000\020\004\uff95\074\uff95\101\uff95" +
    "\102\uff95\103\uff95\104\uff95\105\uff95\001\002\000\004\072" +
    "\360\001\002\000\006\005\uffb1\075\111\001\002\000\004" +
    "\072\351\001\002\000\004\072\346\001\002\000\016\011" +
    "\uffb3\012\uffb3\013\uffb3\071\uffb3\076\057\100\uffb3\001\002" +
    "\000\014\011\062\012\063\013\065\071\061\100\350\001" +
    "\002\000\020\004\uff91\074\uff91\101\uff91\102\uff91\103\uff91" +
    "\104\uff91\105\uff91\001\002\000\004\077\352\001\002\000" +
    "\004\100\353\001\002\000\020\004\uff92\074\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\105\uff92\001\002\000\004\005" +
    "\355\001\002\000\004\061\356\001\002\000\004\004\357" +
    "\001\002\000\004\005\uffca\001\002\000\010\066\106\067" +
    "\105\070\107\001\002\000\004\100\362\001\002\000\020" +
    "\004\uff8f\074\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105" +
    "\uff8f\001\002\000\016\011\uffb3\012\uffb3\013\uffb3\071\uffb3" +
    "\076\057\100\uffb3\001\002\000\014\011\062\012\063\013" +
    "\065\071\061\100\365\001\002\000\020\004\uff90\074\uff90" +
    "\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\001\002\000" +
    "\004\075\367\001\002\000\004\100\370\001\002\000\020" +
    "\004\uff94\074\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105" +
    "\uff94\001\002\000\020\004\uff96\074\uff96\101\uff96\102\uff96" +
    "\103\uff96\104\uff96\105\uff96\001\002\000\006\005\uffb1\075" +
    "\111\001\002\000\004\005\374\001\002\000\004\061\375" +
    "\001\002\000\004\004\376\001\002\000\004\005\uffc9\001" +
    "\002\000\004\077\u0100\001\002\000\004\100\u0101\001\002" +
    "\000\020\004\uff93\074\uff93\101\uff93\102\uff93\103\uff93\104" +
    "\uff93\105\uff93\001\002\000\004\005\uffcc\001\002\000\006" +
    "\040\334\053\uffce\001\002\000\004\004\u0105\001\002\000" +
    "\004\005\uffde\001\002\000\004\077\u0107\001\002\000\004" +
    "\007\u0108\001\002\000\004\010\u0109\001\002\000\004\100" +
    "\u010a\001\002\000\020\004\uff80\034\uff80\074\uff80\102\uff80" +
    "\103\uff80\104\uff80\105\uff80\001\002\000\004\077\u010c\001" +
    "\002\000\004\100\u010d\001\002\000\020\004\uff84\034\uff84" +
    "\074\uff84\102\uff84\103\uff84\104\uff84\105\uff84\001\002\000" +
    "\010\066\106\067\105\070\107\001\002\000\004\100\u0110" +
    "\001\002\000\020\004\uff81\034\uff81\074\uff81\102\uff81\103" +
    "\uff81\104\uff81\105\uff81\001\002\000\020\004\uff87\034\uff87" +
    "\074\uff87\102\uff87\103\uff87\104\uff87\105\uff87\001\002\000" +
    "\004\005\uffe8\001\002\000\016\011\uffb3\012\uffb3\013\uffb3" +
    "\071\uffb3\076\057\100\uffb3\001\002\000\014\011\062\012" +
    "\063\013\065\071\061\100\u0115\001\002\000\020\004\uff82" +
    "\034\uff82\074\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001" +
    "\002\000\004\077\u0117\001\002\000\004\100\u0118\001\002" +
    "\000\020\004\uff85\034\uff85\074\uff85\102\uff85\103\uff85\104" +
    "\uff85\105\uff85\001\002\000\006\005\uffb1\075\111\001\002" +
    "\000\004\005\u011b\001\002\000\004\065\u011c\001\002\000" +
    "\004\004\u011d\001\002\000\004\005\uffe0\001\002\000\004" +
    "\005\u0121\001\002\000\004\043\u0198\001\002\000\004\005" +
    "\uffc5\001\002\000\006\014\u0125\043\uffc7\001\002\000\004" +
    "\005\u0124\001\002\000\004\005\uffc6\001\002\000\006\014" +
    "\u0125\043\uffc8\001\002\000\016\004\u0127\074\132\102\141" +
    "\103\133\104\135\105\136\001\002\000\016\004\u0193\074" +
    "\132\102\141\103\133\104\135\105\136\001\002\000\004" +
    "\005\u012a\001\002\000\004\005\uffc1\001\002\000\004\005" +
    "\u0190\001\002\000\006\016\u012c\017\u012b\001\002\000\016" +
    "\004\u017f\074\132\102\141\103\133\104\135\105\136\001" +
    "\002\000\016\004\u012e\074\132\102\141\103\133\104\135" +
    "\105\136\001\002\000\016\004\u0176\074\132\102\141\103" +
    "\133\104\135\105\136\001\002\000\006\005\u0133\075\111" +
    "\001\002\000\004\005\u0175\001\002\000\004\005\u0171\001" +
    "\002\000\004\036\u016f\001\002\000\004\005\ufff1\001\002" +
    "\000\036\006\u013e\020\u0136\022\u0134\026\u0137\027\u0139\030" +
    "\u013d\031\u0135\035\u0138\036\uffda\037\uffda\041\u013a\050\uffda" +
    "\057\u013c\060\u013b\001\002\000\016\004\137\074\132\102" +
    "\141\103\133\104\135\105\136\001\002\000\016\004\137" +
    "\074\132\102\141\103\133\104\135\105\136\001\002\000" +
    "\016\004\137\074\132\102\141\103\133\104\135\105\136" +
    "\001\002\000\020\004\320\034\322\074\313\102\324\103" +
    "\314\104\317\105\321\001\002\000\022\004\253\032\243" +
    "\034\254\074\244\102\255\103\246\104\251\105\252\001" +
    "\002\000\016\004\137\074\132\102\141\103\133\104\135" +
    "\105\136\001\002\000\020\004\205\032\176\074\177\102" +
    "\206\103\201\104\203\105\204\001\002\000\004\004\u014e" +
    "\001\002\000\016\004\137\074\132\102\141\103\133\104" +
    "\135\105\136\001\002\000\016\004\137\074\132\102\141" +
    "\103\133\104\135\105\136\001\002\000\022\004\054\032" +
    "\042\034\052\074\043\102\055\103\044\104\050\105\053" +
    "\001\002\000\006\005\uffb1\075\111\001\002\000\004\005" +
    "\u0141\001\002\000\004\062\u0142\001\002\000\004\004\u0143" +
    "\001\002\000\004\005\uffd8\001\002\000\006\005\uffb1\075" +
    "\111\001\002\000\004\005\u0146\001\002\000\004\047\u0147" +
    "\001\002\000\004\004\u0148\001\002\000\004\005\uffd4\001" +
    "\002\000\016\005\uffb3\011\uffb3\012\uffb3\013\uffb3\071\uffb3" +
    "\076\057\001\002\000\014\005\u014b\011\062\012\063\013" +
    "\065\071\061\001\002\000\004\046\u014c\001\002\000\004" +
    "\004\u014d\001\002\000\004\005\uffd2\001\002\000\004\005" +
    "\uffcf\001\002\000\006\005\uffb1\075\111\001\002\000\004" +
    "\005\u0151\001\002\000\004\063\u0152\001\002\000\004\004" +
    "\u0153\001\002\000\004\005\uffd6\001\002\000\006\005\uffb1" +
    "\075\111\001\002\000\004\005\u0156\001\002\000\004\042" +
    "\u0157\001\002\000\004\004\u0158\001\002\000\004\005\uffd9" +
    "\001\002\000\006\005\uffb1\075\111\001\002\000\004\005" +
    "\u015b\001\002\000\004\044\u015c\001\002\000\004\004\u015d" +
    "\001\002\000\004\005\uffd7\001\002\000\004\005\333\001" +
    "\002\000\004\053\u0160\001\002\000\004\004\u0161\001\002" +
    "\000\004\005\uffd1\001\002\000\004\005\u0121\001\002\000" +
    "\004\043\u0164\001\002\000\004\004\u0165\001\002\000\004" +
    "\005\uffd5\001\002\000\006\005\uffb1\075\111\001\002\000" +
    "\004\005\u0168\001\002\000\004\065\u0169\001\002\000\004" +
    "\004\u016a\001\002\000\004\005\uffd3\001\002\000\004\005" +
    "\u0133\001\002\000\004\050\u016d\001\002\000\004\004\u016e" +
    "\001\002\000\004\005\uffd0\001\002\000\004\004\u0170\001" +
    "\002\000\004\005\uffb9\001\002\000\004\036\u0172\001\002" +
    "\000\004\004\u0173\001\002\000\004\005\uffbd\001\002\000" +
    "\004\005\ufff2\001\002\000\036\006\u013e\020\u0136\022\u0134" +
    "\026\u0137\027\u0139\030\u013d\031\u0135\035\u0138\036\uffdb\037" +
    "\uffdb\041\u013a\050\uffdb\057\u013c\060\u013b\001\002\000\006" +
    "\005\u0133\075\111\001\002\000\004\005\u017b\001\002\000" +
    "\004\036\u0179\001\002\000\004\004\u017a\001\002\000\004" +
    "\005\uffba\001\002\000\004\036\u017c\001\002\000\004\004" +
    "\u017d\001\002\000\004\005\uffbe\001\002\000\016\004\u0187" +
    "\074\132\102\141\103\133\104\135\105\136\001\002\000" +
    "\006\005\u0133\075\111\001\002\000\004\005\u0184\001\002" +
    "\000\004\037\u0182\001\002\000\004\004\u0183\001\002\000" +
    "\004\005\uffbb\001\002\000\004\037\u0185\001\002\000\004" +
    "\004\u0186\001\002\000\004\005\uffbf\001\002\000\006\005" +
    "\u0133\075\111\001\002\000\004\005\u018c\001\002\000\004" +
    "\037\u018a\001\002\000\004\004\u018b\001\002\000\004\005" +
    "\uffbc\001\002\000\004\037\u018d\001\002\000\004\004\u018e" +
    "\001\002\000\004\005\uffc0\001\002\000\004\005\uffc2\001" +
    "\002\000\010\015\u0191\016\u012c\017\u012b\001\002\000\004" +
    "\004\u0192\001\002\000\004\005\uffc3\001\002\000\004\005" +
    "\u012a\001\002\000\004\005\u0195\001\002\000\010\015\u0196" +
    "\016\u012c\017\u012b\001\002\000\004\004\u0197\001\002\000" +
    "\004\005\uffc4\001\002\000\004\004\u0199\001\002\000\004" +
    "\005\uffe2\001\002\000\004\005\u0133\001\002\000\004\050" +
    "\u019c\001\002\000\004\004\u019d\001\002\000\004\005\uffdd" +
    "\001\002\000\004\004\u019f\001\002\000\004\005\ufff5\001" +
    "\002\000\004\056\u01a1\001\002\000\004\004\u01a2\001\002" +
    "\000\004\002\ufffd\001\002\000\004\004\u01a4\001\002\000" +
    "\004\005\u01a6\001\002\000\004\005\u01c0\001\002\000\010" +
    "\021\u01a8\024\u01aa\025\u01a9\001\002\000\004\005\ufffa\001" +
    "\002\000\004\004\u01bb\001\002\000\004\032\u01b3\001\002" +
    "\000\004\032\u01ab\001\002\000\004\072\u01ac\001\002\000" +
    "\004\075\u01ad\001\002\000\004\100\u01ae\001\002\000\004" +
    "\004\u01af\001\002\000\004\005\u01b0\001\002\000\004\055" +
    "\u01b1\001\002\000\004\004\u01b2\001\002\000\004\005\ufff8" +
    "\001\002\000\004\072\u01b4\001\002\000\004\075\u01b5\001" +
    "\002\000\004\100\u01b6\001\002\000\004\004\u01b7\001\002" +
    "\000\004\005\u01b8\001\002\000\004\054\u01b9\001\002\000" +
    "\004\004\u01ba\001\002\000\004\005\ufff9\001\002\000\006" +
    "\005\uffb1\075\111\001\002\000\004\005\u01bd\001\002\000" +
    "\004\052\u01be\001\002\000\004\004\u01bf\001\002\000\004" +
    "\005\ufff7\001\002\000\012\021\u01a8\024\u01aa\025\u01a9\045" +
    "\u01c2\001\002\000\004\005\ufffb\001\002\000\004\004\u01c3" +
    "\001\002\000\004\005\ufffc\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\006\002\004\003\005\001\001\000\006\002" +
    "\004\003\u01c4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\012\001" +
    "\001\000\002\001\001\000\004\005\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\017\020\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\137\032\133\033\u0199\001\001\000\010" +
    "\031\137\032\133\033\u011d\001\001\000\010\031\137\032" +
    "\133\033\u0118\001\001\000\010\016\315\042\314\046\322" +
    "\001\001\000\010\015\247\041\244\044\246\001\001\000" +
    "\010\031\137\032\133\033\235\001\001\000\010\013\201" +
    "\037\040\045\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\137\032\133\033\166\001\001\000\010" +
    "\031\137\032\133\033\130\001\001\000\014\012\050\013" +
    "\044\036\045\037\040\043\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\116\037\115\001\001\000\002\001\001\000\004" +
    "\030\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\144\001\001\000\002\001\001\000" +
    "\004\027\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\223\001\001\000\002\001\001\000\004\037\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\275" +
    "\001\001\000\004\041\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\331\024\330\047\327\001\001\000" +
    "\002\001\001\000\004\027\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0101\001\001\000\002\001\001\000\006\014\335" +
    "\040\340\001\001\000\002\001\001\000\004\040\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\u0121" +
    "\011\u011f\050\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\u0125\032\133\001" +
    "\001\000\004\032\144\001\001\000\006\025\u0128\026\u0127" +
    "\001\001\000\002\001\001\000\004\026\u018e\001\001\000" +
    "\002\001\001\000\006\031\u017d\032\133\001\001\000\006" +
    "\031\u012c\032\133\001\001\000\004\032\144\001\001\000" +
    "\012\021\u0130\030\u012f\034\u012e\035\u0131\001\001\000\004" +
    "\035\u0173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\137\032\133" +
    "\033\u016a\001\001\000\010\031\137\032\133\033\u0165\001" +
    "\001\000\010\031\137\032\133\033\u0161\001\001\000\010" +
    "\016\315\042\314\046\u015d\001\001\000\010\015\247\041" +
    "\244\044\u0158\001\001\000\010\031\137\032\133\033\u0153" +
    "\001\001\000\010\013\201\037\040\045\u014e\001\001\000" +
    "\002\001\001\000\010\031\137\032\133\033\u0148\001\001" +
    "\000\010\031\137\032\133\033\u0143\001\001\000\014\012" +
    "\050\013\044\036\045\037\040\043\u013e\001\001\000\004" +
    "\030\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u014f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u0154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0159\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\331\024\330\047\u015e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u0121\011\u011f\050\u0162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u0166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\u016b\034\u012e\035\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\u0177\030\u0176\034\u012e\035\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\144\001\001\000\012\021" +
    "\u0180\030\u017f\034\u012e\035\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\u0188\030\u0187\034\u012e\035\u0131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\u0193\026\u0127\001\001\000\004\026" +
    "\u018e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\u019a\034\u012e\035\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u01a6\017\u01a4\001\001\000" +
    "\004\006\u01c0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u01bb\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public Nodo raiz;

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }


    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TAlineado ::= centrado 
            {
              Nodo RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ta = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo=new Nodo("centrado",taleft,taright);
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAlineado",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TAlineado ::= derecha 
            {
              Nodo RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ta = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo=new Nodo("derecha",taleft,taright);
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAlineado",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TAlineado ::= izquierda 
            {
              Nodo RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ta = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo=new Nodo("izquierda",taleft,taright);
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TAlineado",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ContParCaja ::= click asignar identificador parL parR puntoComa 
            {
              Nodo RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo clic =new Nodo("click",clleft,clright);
Nodo met =new Nodo(iden,clleft,clright);
clic.hijos.add(met);
RESULT=clic;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParCaja",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ContParCaja ::= alineado asignar TAlineado puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alineado",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParCaja",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ContParCaja ::= ancho asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("ancho",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParCaja",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ContParCaja ::= alto asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alto",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParCaja",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ContParCaja ::= grupo asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("grupo",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParCaja",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ContParCaja ::= id asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("id",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParCaja",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ParCaja ::= ContParCaja 
            {
              Nodo RESULT =null;
		int cpgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cpgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo = new Nodo("Parametros",cpgleft,cpgright);
cuerpo.hijos.add(cpg);
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParCaja",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ParCaja ::= ParCaja ContParCaja 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cpgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cpgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
pg.hijos.add(cpg);
RESULT =pg;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParCaja",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ContParGen ::= alineado asignar TAlineado puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alineado",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParGen",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ContParGen ::= ancho asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("ancho",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParGen",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ContParGen ::= alto asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alto",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParGen",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ContParGen ::= grupo asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("grupo",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParGen",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ContParGen ::= id asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("id",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParGen",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ParGen ::= ContParGen 
            {
              Nodo RESULT =null;
		int cpgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cpgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo = new Nodo("Parametros",cpgleft,cpgright);
cuerpo.hijos.add(cpg);
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParGen",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ParGen ::= ParGen ContParGen 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cpgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cpgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
pg.hijos.add(cpg);
RESULT =pg;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParGen",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ContParOp ::= alineado asignar TAlineado puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alineado",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParOp",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ContParOp ::= ancho asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("ancho",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParOp",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ContParOp ::= alto asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alto",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParOp",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ContParOp ::= grupo asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("grupo",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParOp",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ContParOp ::= id asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("id",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParOp",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ContParOp ::= valor asignar stringcad puntoComa 
            {
              Nodo RESULT =null;
		int ruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ru = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo ruta =new Nodo("valor",ruleft,ruright);
String texto=cad.replace("\"","");
Nodo cadena =new Nodo(texto,cadleft,cadright);
ruta.hijos.add(cadena);
RESULT=ruta;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParOp",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ParOp ::= ContParOp 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo=new Nodo("Parametros",opleft,opright);
cuerpo.hijos.add(op);
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParOp",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ParOp ::= ParOp ContParOp 
            {
              Nodo RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo po = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
po.hijos.add(cpo);
RESULT =po;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParOp",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ContParEnl ::= alineado asignar TAlineado puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alineado",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParEnl",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ContParEnl ::= ancho asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("ancho",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParEnl",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ContParEnl ::= alto asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alto",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParEnl",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ContParEnl ::= grupo asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("grupo",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParEnl",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ContParEnl ::= id asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("id",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParEnl",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ContParEnl ::= ruta asignar stringcad puntoComa 
            {
              Nodo RESULT =null;
		int ruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ru = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo ruta =new Nodo("ruta",ruleft,ruright);
String texto=cad.replace("\"","");
Nodo cadena =new Nodo(texto,cadleft,cadright);
ruta.hijos.add(cadena);
RESULT=ruta;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParEnl",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ParEnl ::= ContParEnl 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo=new Nodo("Parametros",opleft,opright);
cuerpo.hijos.add(op);
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParEnl",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ParEnl ::= ParEnl ContParEnl 
            {
              Nodo RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo po = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
po.hijos.add(cpo);
RESULT =po;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParEnl",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ContParBtn ::= alineado asignar TAlineado puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alineado",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParBtn",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ContParBtn ::= ancho asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("ancho",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParBtn",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ContParBtn ::= alto asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alto",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParBtn",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ContParBtn ::= grupo asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("grupo",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParBtn",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ContParBtn ::= id asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("id",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParBtn",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ContParBtn ::= click asignar identificador parL parR puntoComa 
            {
              Nodo RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo clic =new Nodo("click",clleft,clright);
Nodo met =new Nodo(iden,clleft,clright);
clic.hijos.add(met);
RESULT=clic;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParBtn",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ContParBtn ::= ruta asignar stringcad puntoComa 
            {
              Nodo RESULT =null;
		int ruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ru = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo ruta =new Nodo("ruta",ruleft,ruright);
String texto=cad.replace("\"","");
Nodo cadena =new Nodo(texto,cadleft,cadright);
ruta.hijos.add(cadena);
RESULT=ruta;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParBtn",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ParBtn ::= ContParBtn 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo=new Nodo("Parametros",opleft,opright);
cuerpo.hijos.add(op);
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParBtn",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ParBtn ::= ParBtn ContParBtn 
            {
              Nodo RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo po = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
po.hijos.add(cpo);
RESULT =po;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParBtn",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ContParImg ::= alineado asignar TAlineado puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alineado",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParImg",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ContParImg ::= ancho asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("ancho",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParImg",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ContParImg ::= alto asignar Tval puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("alto",pgleft,pgright);

cuerpo.hijos.add(va);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParImg",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ContParImg ::= grupo asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("grupo",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParImg",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ContParImg ::= id asignar identificador puntoComa 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String pg = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo cuerpo= new Nodo("id",pgleft,pgright);

Nodo cadena =new Nodo(cad,cadleft,cadright);
cuerpo.hijos.add(cadena);
RESULT=cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParImg",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ContParImg ::= click asignar identificador parL parR puntoComa 
            {
              Nodo RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo clic =new Nodo("click",clleft,clright);
Nodo met =new Nodo(iden,clleft,clright);
clic.hijos.add(met);
RESULT=clic;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParImg",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ContParImg ::= ruta asignar stringcad puntoComa 
            {
              Nodo RESULT =null;
		int ruleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ruright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ru = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo ruta =new Nodo("ruta",ruleft,ruright);
String texto=cad.replace("\"","");
Nodo cadena =new Nodo(texto,cadleft,cadright);
ruta.hijos.add(cadena);
RESULT=ruta;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContParImg",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ParImg ::= ContParImg 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo=new Nodo("Parametros",opleft,opright);
cuerpo.hijos.add(op);
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParImg",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ParImg ::= ParEnl ContParImg 
            {
              Nodo RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo po = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
po.hijos.add(cpo);
RESULT =po;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParImg",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TCad ::= 
            {
              Nodo RESULT =null;
		
Nodo cuerpo = new Nodo("Vacio");
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TCad",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TCad ::= stringcad 
            {
              Nodo RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=iden.replace("\"","");
Nodo cuerpo = new Nodo(cadena,idenleft,idenright);
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TCad",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Tval ::= 
            {
              Nodo RESULT =null;
		
Nodo cuerpo = new Nodo("Vacio");
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tval",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Tval ::= valDecimal 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo numero=new Nodo(val.toString(),valleft,valright);

RESULT = numero;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tval",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Tval ::= Tval menos valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
double res = pnum-snum;
tv.valor=String.valueOf(res);
RESULT = tv;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tval",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Tval ::= Tval div valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
double res = pnum/snum;
tv.valor=String.valueOf(res);
RESULT = tv;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tval",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Tval ::= Tval por valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
double res = pnum*snum;
tv.valor=String.valueOf(res);
RESULT = tv;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tval",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tval ::= Tval mas valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
double res = pnum+snum;
tv.valor=String.valueOf(res);
RESULT = tv;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tval",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ContFila ::= menor ct mayor NoContPanel finct mayor 
            {
              Nodo RESULT =null;
		int ctnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int ctnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String ctn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
Nodo cuerpo =new Nodo("ct",ctnleft,ctnright);
Nodo para =new Nodo("Sin Parametros");
cuerpo.hijos.add(para); 
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ContFila ::= menor ct ParGen mayor NoContPanel finct mayor 
            {
              Nodo RESULT =null;
		int ctnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int ctnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ctn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
Nodo cuerpo =new Nodo("ct",ctnleft,ctnright);
 cuerpo.hijos.add(pg);
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ContFila ::= menor cb mayor NoContPanel fincb mayor 
            {
              Nodo RESULT =null;
		int cbnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cbnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String cbn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
Nodo cuerpo =new Nodo("cb",cbnleft,cbnright);
Nodo para =new Nodo("Sin Parametros");
cuerpo.hijos.add(para);
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ContFila ::= menor cb ParGen mayor NoContPanel fincb mayor 
            {
              Nodo RESULT =null;
		int cbnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cbnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cbn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
Nodo cuerpo =new Nodo("cb",cbnleft,cbnright);
 cuerpo.hijos.add(pg);
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ContFila ::= menor ct mayor TCad menor finct mayor 
            {
              Nodo RESULT =null;
		int ctnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int ctnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ctn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo cuerpo =new Nodo("ct",ctnleft,ctnright);
Nodo para =new Nodo("Sin Parametros");
cuerpo.hijos.add(para); 
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ContFila ::= menor ct ParGen mayor TCad menor finct mayor 
            {
              Nodo RESULT =null;
		int ctnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int ctnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String ctn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo cuerpo =new Nodo("ct",ctnleft,ctnright);
 cuerpo.hijos.add(pg);
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ContFila ::= menor cb mayor TCad menor fincb mayor 
            {
              Nodo RESULT =null;
		int cbnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cbnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cbn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo cuerpo =new Nodo("cb",cbnleft,cbnright);
Nodo para =new Nodo("Sin Parametros");
cuerpo.hijos.add(para);
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ContFila ::= menor cb ParGen mayor TCad menor fincb mayor 
            {
              Nodo RESULT =null;
		int cbnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cbnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String cbn = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo cuerpo =new Nodo("cb",cbnleft,cbnright);
 cuerpo.hijos.add(pg);
        cuerpo.hijos.add(tx);    
RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContFila",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListaFila ::= ContFila 
            {
              Nodo RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cf = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Nodo cuerpo =new Nodo("ContFila",cfleft,cfright);
    cuerpo.hijos.add(cf);
    RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaFila",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListaFila ::= ListaFila ContFila 
            {
              Nodo RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lf = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cf = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
lf.hijos.add(cf);
RESULT= lf;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaFila",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ContTabla ::= menor fila mayor ListaFila menor finfila mayor 
            {
              Nodo RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo li = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
   Nodo cuerpo =new Nodo("fil_t",lileft,liright);
    cuerpo.hijos.add(li);
    RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContTabla",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ContTabla ::= menor fila ParGen mayor ListaFila menor finfila mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo li = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
   Nodo cuerpo =new Nodo("fil_t",lileft,liright);
    cuerpo.hijos.add(pg);
    cuerpo.hijos.add(li);
    RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContTabla",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListaTabla ::= ContTabla 
            {
              Nodo RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   Nodo cuerpo =new Nodo("ContenidoTabla",ccleft,ccright);
    cuerpo.hijos.add(cc);
    RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaTabla",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListaTabla ::= ListaTabla ContTabla 
            {
              Nodo RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo ta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ct = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

    ta.hijos.add(ct);
    RESULT =ta;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaTabla",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CTabla ::= menor 
            {
              Nodo RESULT =null;
		Nodo vacio=new Nodo("Vacio");
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CTabla",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CTabla ::= ListaTabla menor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("CTabla",pgleft,pgright);
vacio.hijos.add(pg);    
RESULT =vacio;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CTabla",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ContCaja ::= menor opcion ParOp mayor TCad menor finopcion mayor 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo po = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo cuerpo =new Nodo("opcion",opleft,opright);
    cuerpo.hijos.add(po);
        cuerpo.hijos.add(tx);    
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCaja",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ContCaja ::= menor opcion mayor TCad menor finopcion mayor 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
Nodo cuerpo =new Nodo("opcion",opleft,opright);
 
        cuerpo.hijos.add(tx);    
RESULT = cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCaja",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListaCaja ::= ContCaja 
            {
              Nodo RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo cuerpo =new Nodo("ContenidoCaja",ccleft,ccright);
    cuerpo.hijos.add(cc);
    RESULT =cuerpo;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaCaja",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListaCaja ::= ListaCaja ContCaja 
            {
              Nodo RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    lc.hijos.add(cc);
    RESULT = lc;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaCaja",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NoCaja ::= menor 
            {
              Nodo RESULT =null;
		Nodo vacio=new Nodo("Vacio");
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NoCaja",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NoCaja ::= ListaCaja menor 
            {
              Nodo RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("Ccaja");
vacio.hijos.add(lc);    
RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NoCaja",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ContPanel ::= menor saltofin mayor 
            {
              Nodo RESULT =null;
		int salleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int salright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String sal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        Nodo saltofin = new Nodo("saltofin", salright, salleft);  
        
        RESULT = saltofin;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ContPanel ::= menor panel CGen NoContPanel finpanel mayor 
            {
              Nodo RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cpnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cpnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo cpn = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        
    Nodo panel = new Nodo("panel", paleft,paright);  
    panel.hijos.add(pg);
panel.hijos.add(cpn);
        RESULT = panel;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ContPanel ::= menor caja CPCaja NoCaja fincaja mayor 
            {
              Nodo RESULT =null;
		int pacleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pacright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String pac = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        Nodo caja = new Nodo("caja", pacright, pacleft);  
    caja.hijos.add(pg);    
    caja.hijos.add(lc);
        RESULT = caja;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ContPanel ::= menor spinner CGen Tval menor finspinner mayor 
            {
              Nodo RESULT =null;
		int spileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int spiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String spi = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo spinner = new Nodo("spinner", spiright, spileft);  
        spinner.hijos.add(pg);
spinner.hijos.add(va);
        RESULT = spinner;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ContPanel ::= menor cajatexto CGen TCad menor fincajatexto mayor 
            {
              Nodo RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo cajatexto = new Nodo("cajatexto", catright, catleft);  
        cajatexto.hijos.add(pg);
        cajatexto.hijos.add(tx);    
        RESULT = cajatexto;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ContPanel ::= menor textoa CGen TCad menor fintextoa mayor 
            {
              Nodo RESULT =null;
		int texaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int texaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String texa = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo textoa = new Nodo("textoa", texaright, texaleft);  
         textoa.hijos.add(pg);
        textoa.hijos.add(tx);    
        RESULT = textoa;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ContPanel ::= menor tabla CGen CTabla fintabla mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo ta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        Nodo tabla = new Nodo("tabla", taright, taleft);  
        tabla.hijos.add(pg);
        tabla.hijos.add(ta);
        RESULT = tabla;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ContPanel ::= menor enlace CPEnl TCad menor finenlace mayor 
            {
              Nodo RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pe = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo enlace = new Nodo("enlace", enright, enleft);  
        enlace.hijos.add(pe);
        enlace.hijos.add(tx);
        RESULT = enlace;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ContPanel ::= menor boton CPBtn TCad menor finboton mayor 
            {
              Nodo RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pb = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo boton = new Nodo("boton", boright, boleft);  
        boton.hijos.add(pb);
        boton.hijos.add(tx);
        RESULT = boton;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ContPanel ::= menor imagen CPImg TCad menor finimagen mayor 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo imagen = new Nodo("imagen", imright, imleft);  
         
        imagen.hijos.add(pi);
        imagen.hijos.add(tx);
        RESULT = imagen;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ContPanel ::= menor texto CGen TCad menor fintexto mayor 
            {
              Nodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo texto = new Nodo("texto", texright, texleft);  
        texto.hijos.add(pg);
        texto.hijos.add(tx);
        RESULT = texto;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContPanel",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NoContPanel ::= menor 
            {
              Nodo RESULT =null;
		
Nodo vacio=new Nodo("Vacio");
    RESULT =vacio
;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NoContPanel",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NoContPanel ::= ListaPanel menor 
            {
              Nodo RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("SiTiene",lpleft,lpright);
vacio.hijos.add(lp);
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NoContPanel",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ContCuerpo ::= menor saltofin mayor 
            {
              Nodo RESULT =null;
		int salleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int salright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String sal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        Nodo saltofin = new Nodo("saltofin", salright, salleft);  
        
        RESULT = saltofin;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ContCuerpo ::= menor panel CGen NoContPanel finpanel mayor 
            {
              Nodo RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cpnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cpnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo cpn = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        
    Nodo panel = new Nodo("panel", paleft,paright);  
 panel.hijos.add(pg);    
panel.hijos.add(cpn);

        RESULT = panel;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ContCuerpo ::= menor caja CPCaja NoCaja fincaja mayor 
            {
              Nodo RESULT =null;
		int pacleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pacright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String pac = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        Nodo caja = new Nodo("caja", pacright, pacleft);  
    caja.hijos.add(pg);    
    caja.hijos.add(lc);
        RESULT = caja;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ContCuerpo ::= menor spinner CGen Tval menor finspinner mayor 
            {
              Nodo RESULT =null;
		int spileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int spiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String spi = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo va = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo spinner = new Nodo("spinner", spiright, spileft);  
        spinner.hijos.add(pg);
spinner.hijos.add(va);
        RESULT = spinner;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ContCuerpo ::= menor cajatexto CGen TCad menor fincajatexto mayor 
            {
              Nodo RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo cajatexto = new Nodo("cajatexto", catright, catleft);  
        cajatexto.hijos.add(pg);
        cajatexto.hijos.add(tx);    
        RESULT = cajatexto;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ContCuerpo ::= menor textoa CGen TCad menor fintextoa mayor 
            {
              Nodo RESULT =null;
		int texaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int texaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String texa = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo textoa = new Nodo("textoa", texaright, texaleft);  
         textoa.hijos.add(pg);
        textoa.hijos.add(tx);    
        RESULT = textoa;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ContCuerpo ::= menor tabla CGen CTabla fintabla mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo ta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        Nodo tabla = new Nodo("tabla", taright, taleft);  
        tabla.hijos.add(pg);
        tabla.hijos.add(ta);
        RESULT = tabla;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ContCuerpo ::= menor enlace CPEnl TCad menor finenlace mayor 
            {
              Nodo RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pe = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo enlace = new Nodo("enlace", enright, enleft);  
        enlace.hijos.add(pe);
        enlace.hijos.add(tx);
        RESULT = enlace;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ContCuerpo ::= menor boton CPBtn TCad menor finboton mayor 
            {
              Nodo RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pb = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo boton = new Nodo("boton", boright, boleft);  
        boton.hijos.add(pb);
        boton.hijos.add(tx);
        RESULT = boton;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ContCuerpo ::= menor imagen CPImg TCad menor finimagen mayor 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo imagen = new Nodo("imagen", imright, imleft);  
         
        imagen.hijos.add(pi);
        imagen.hijos.add(tx);
        RESULT = imagen;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ContCuerpo ::= menor texto CGen TCad menor fintexto mayor 
            {
              Nodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Nodo texto = new Nodo("texto", texright, texleft);  
        texto.hijos.add(pg);
        texto.hijos.add(tx);
        RESULT = texto;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContCuerpo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CPCaja ::= mayor 
            {
              Nodo RESULT =null;
		Nodo vacio=new Nodo("Sin Parametros");
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPCaja",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CPCaja ::= ParCaja mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("LParametro");
vacio.hijos.add(pg);    
RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPCaja",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CPEnl ::= mayor 
            {
              Nodo RESULT =null;
		Nodo vacio=new Nodo("Sin Parametros");
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPEnl",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CPEnl ::= ParEnl mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("LParametro");
vacio.hijos.add(pg);    
RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPEnl",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CPBtn ::= mayor 
            {
              Nodo RESULT =null;
		Nodo vacio=new Nodo("Sin Parametros");
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPBtn",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CPBtn ::= ParBtn mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("LParametro");
vacio.hijos.add(pg);    
RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPBtn",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CPImg ::= mayor 
            {
              Nodo RESULT =null;
		Nodo vacio=new Nodo("Sin Parametros");
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPImg",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CPImg ::= ParImg mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("LParametro");
vacio.hijos.add(pg);    
RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPImg",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CGen ::= mayor 
            {
              Nodo RESULT =null;
		Nodo vacio=new Nodo("Sin Parametros");
    RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CGen",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CGen ::= ParGen mayor 
            {
              Nodo RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Nodo vacio=new Nodo("LParametro");
vacio.hijos.add(pg);    
RESULT =vacio;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CGen",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListaPanel ::= ContPanel 
            {
              Nodo RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo cuerpo =new Nodo("ContenidoPanel",ccleft,ccright);
    cuerpo.hijos.add(cc);
    RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaPanel",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListaPanel ::= ListaPanel ContPanel 
            {
              Nodo RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    lc.hijos.add(cc);
    RESULT = lc;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaPanel",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListaCuerpo ::= ContCuerpo 
            {
              Nodo RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo cuerpo =new Nodo("ContenidoCuerpo",ccleft,ccright);
    cuerpo.hijos.add(cc);
    RESULT =cuerpo;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaCuerpo",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListaCuerpo ::= ListaCuerpo ContCuerpo 
            {
              Nodo RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    lc.hijos.add(cc);
    RESULT = lc;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaCuerpo",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Cuerp ::= menor cuerpo mayor menor fincuerpo mayor 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
  Nodo cuerpo = new Nodo("cuerpo", opright, opleft);
       
            RESULT = cuerpo;
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerp",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Cuerp ::= menor cuerpo mayor ListaCuerpo menor fincuerpo mayor 
            {
              Nodo RESULT =null;
		int Conleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int Conright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo Con = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
  Nodo cuerpo = new Nodo("cuerpo", opright, opleft);
          cuerpo.hijos.add(Con);
            RESULT = cuerpo;
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerp",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ContEncabezado ::= menor titulo mayor TCad menor fintitulo mayor 
            {
              Nodo RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tx = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
     Nodo titulo = new Nodo("titulo", tileft,tiright);
    
     
           titulo.hijos.add(tx);
            RESULT = titulo;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContEncabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ContEncabezado ::= menor cjs ruta asignar stringcad puntoComa mayor menor fincjs mayor 
            {
              Nodo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
     Nodo cjs = new Nodo("CJS", csleft,csright);
    String cadena= cad.replace("\"","");
    Nodo strin =new Nodo(cadena,cadleft,cadright);
    cjs.hijos.add(strin);          
    RESULT = cjs;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContEncabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ContEncabezado ::= menor ccss ruta asignar stringcad puntoComa mayor menor finccss mayor 
            {
              Nodo RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String css = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
     
     Nodo ccss = new Nodo("CCSS", cssleft, cssright);
String cadena= cad.replace("\"","");
Nodo strin =new Nodo(cadena,cadleft,cadright);
ccss.hijos.add(strin);          

            RESULT = ccss;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContEncabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListaEncabezado ::= ContEncabezado 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ce = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo encabezado =new Nodo("ContenidoEncabezado",celeft,ceright);
    encabezado.hijos.add(ce);
    RESULT = encabezado;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaEncabezado",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListaEncabezado ::= ListaEncabezado ContEncabezado 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ce = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
le.hijos.add(ce);
RESULT = le;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaEncabezado",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Encabezad ::= menor encabezado mayor ListaEncabezado menor finencabezado mayor 
            {
              Nodo RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
  Nodo encabezado = new Nodo("encabezado", opeleft, operight);
          encabezado.hijos.add(le);
            RESULT = encabezado;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Encabezad",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= menor chtml mayor Encabezad Cuerp menor finchtml mayor 
            {
              Nodo RESULT =null;
		int htleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int htright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String ht = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cuerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cuerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo cuer = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
/* 

        
*/
    Nodo cuerpo = new Nodo("chtml", htleft,htright);
    cuerpo.hijos.add(sents);    
    cuerpo.hijos.add(cuer);
        RESULT = cuerpo;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIAL ::= 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIAL",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAL ::= error INICIAL 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIAL",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= S 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            parser.raiz=raiz;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIAL",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

