
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 28 19:46:39 CST 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 28 19:46:39 CST 2018
  */
public class SintacticoCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCSS() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\002\000\002\002\004\000\002\002\003" +
    "\000\002\015\006\000\002\005\004\000\002\005\003\000" +
    "\002\016\010\000\002\016\010\000\002\010\004\000\002" +
    "\010\003\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\013\000\002\012\007\000\002\012\015\000" +
    "\002\012\007\000\002\012\007\000\002\007\003\000\002" +
    "\007\003\000\002\006\003\000\002\006\003\000\002\017" +
    "\005\000\002\017\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\003\000" +
    "\002\011\005\000\002\011\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\ufffe\003\004\022\006\001\002\000" +
    "\010\002\ufffe\003\004\022\006\001\002\000\006\002\ufffc" +
    "\022\ufffc\001\002\000\004\016\013\001\002\000\006\002" +
    "\000\022\006\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufffd\022\ufffd\001\002\000" +
    "\006\020\017\023\015\001\002\000\010\017\ufff9\020\ufff9" +
    "\023\ufff9\001\002\000\004\004\166\001\002\000\010\017" +
    "\164\020\017\023\015\001\002\000\004\004\020\001\002" +
    "\000\004\022\021\001\002\000\004\005\022\001\002\000" +
    "\004\014\023\001\002\000\030\024\034\025\025\026\031" +
    "\027\033\030\037\032\027\033\036\040\030\052\026\053" +
    "\035\056\032\001\002\000\036\017\ufff5\020\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032\ufff5\033" +
    "\ufff5\040\ufff5\052\ufff5\053\ufff5\056\ufff5\001\002\000\004" +
    "\012\152\001\002\000\004\012\146\001\002\000\004\012" +
    "\142\001\002\000\004\012\136\001\002\000\004\012\132" +
    "\001\002\000\004\012\126\001\002\000\004\012\111\001" +
    "\002\000\004\012\102\001\002\000\004\012\066\001\002" +
    "\000\004\012\056\001\002\000\004\012\042\001\002\000" +
    "\036\017\ufff7\020\ufff7\023\ufff7\024\034\025\025\026\031" +
    "\027\033\030\037\032\027\033\036\040\030\052\026\053" +
    "\035\056\032\001\002\000\036\017\ufff6\020\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6\033" +
    "\ufff6\040\ufff6\052\ufff6\053\ufff6\056\ufff6\001\002\000\004" +
    "\015\043\001\002\000\014\034\044\036\050\037\047\041" +
    "\052\045\051\001\002\000\006\011\uffda\014\uffda\001\002" +
    "\000\006\011\053\014\054\001\002\000\006\011\uffdd\014" +
    "\uffdd\001\002\000\006\011\uffdb\014\uffdb\001\002\000\006" +
    "\011\uffdc\014\uffdc\001\002\000\006\011\uffd8\014\uffd8\001" +
    "\002\000\006\011\uffd9\014\uffd9\001\002\000\014\034\044" +
    "\036\050\037\047\041\052\045\051\001\002\000\036\017" +
    "\ufff2\020\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\032\ufff2\033\ufff2\040\ufff2\052\ufff2\053\ufff2\056" +
    "\ufff2\001\002\000\006\011\uffde\014\uffde\001\002\000\004" +
    "\015\057\001\002\000\012\031\061\035\064\042\062\045" +
    "\063\001\002\000\004\014\065\001\002\000\004\014\uffd6" +
    "\001\002\000\004\014\uffd7\001\002\000\004\014\uffd5\001" +
    "\002\000\004\014\uffd4\001\002\000\036\017\ufff4\020\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032" +
    "\ufff4\033\ufff4\040\ufff4\052\ufff4\053\ufff4\056\ufff4\001\002" +
    "\000\004\015\067\001\002\000\004\016\070\001\002\000" +
    "\006\046\071\047\073\001\002\000\010\011\uffe7\014\uffe7" +
    "\017\uffe7\001\002\000\004\011\074\001\002\000\010\011" +
    "\uffe6\014\uffe6\017\uffe6\001\002\000\006\050\075\051\076" +
    "\001\002\000\004\017\uffe9\001\002\000\004\017\uffe8\001" +
    "\002\000\004\017\100\001\002\000\004\014\101\001\002" +
    "\000\036\017\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\032\uffee\033\uffee\040\uffee\052\uffee" +
    "\053\uffee\056\uffee\001\002\000\004\015\103\001\002\000" +
    "\004\060\104\001\002\000\010\006\uffe4\011\uffe4\014\uffe4" +
    "\001\002\000\006\006\106\014\107\001\002\000\004\060" +
    "\110\001\002\000\036\017\ufff1\020\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\033\ufff1\040" +
    "\ufff1\052\ufff1\053\ufff1\056\ufff1\001\002\000\010\006\uffe5" +
    "\011\uffe5\014\uffe5\001\002\000\004\015\112\001\002\000" +
    "\004\057\114\001\002\000\014\006\116\007\117\010\121" +
    "\013\115\014\120\001\002\000\016\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\001\002\000\004\057\125" +
    "\001\002\000\004\057\124\001\002\000\004\057\123\001" +
    "\002\000\036\017\ufff0\020\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\040\ufff0\052" +
    "\ufff0\053\ufff0\056\ufff0\001\002\000\004\057\122\001\002" +
    "\000\016\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\001\002\000\016\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\001\002\000\016\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\013\uffe3\014\uffe3\001\002\000\016\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\001\002\000" +
    "\004\015\127\001\002\000\004\060\104\001\002\000\006" +
    "\006\106\014\131\001\002\000\036\017\ufff3\020\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\040\ufff3\052\ufff3\053\ufff3\056\ufff3\001\002\000" +
    "\004\015\133\001\002\000\006\046\071\047\073\001\002" +
    "\000\004\014\135\001\002\000\036\017\uffeb\020\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb" +
    "\033\uffeb\040\uffeb\052\uffeb\053\uffeb\056\uffeb\001\002\000" +
    "\004\015\137\001\002\000\004\060\104\001\002\000\006" +
    "\006\106\014\141\001\002\000\036\017\uffea\020\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\032\uffea" +
    "\033\uffea\040\uffea\052\uffea\053\uffea\056\uffea\001\002\000" +
    "\004\015\143\001\002\000\006\046\071\047\073\001\002" +
    "\000\004\014\145\001\002\000\036\017\uffed\020\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed" +
    "\033\uffed\040\uffed\052\uffed\053\uffed\056\uffed\001\002\000" +
    "\004\015\147\001\002\000\004\060\104\001\002\000\006" +
    "\006\106\014\151\001\002\000\036\017\uffef\020\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef" +
    "\033\uffef\040\uffef\052\uffef\053\uffef\056\uffef\001\002\000" +
    "\004\015\153\001\002\000\004\016\154\001\002\000\004" +
    "\057\114\001\002\000\014\006\116\007\117\010\121\011" +
    "\156\013\115\001\002\000\004\060\104\001\002\000\006" +
    "\006\106\011\160\001\002\000\006\046\071\047\073\001" +
    "\002\000\004\017\162\001\002\000\004\014\163\001\002" +
    "\000\036\017\uffec\020\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\032\uffec\033\uffec\040\uffec\052\uffec" +
    "\053\uffec\056\uffec\001\002\000\006\002\ufffb\022\ufffb\001" +
    "\002\000\010\017\ufffa\020\ufffa\023\ufffa\001\002\000\004" +
    "\022\167\001\002\000\004\005\170\001\002\000\004\014" +
    "\171\001\002\000\030\024\034\025\025\026\031\027\033" +
    "\030\037\032\027\033\036\040\030\052\026\053\035\056" +
    "\032\001\002\000\036\017\ufff8\020\ufff8\023\ufff8\024\034" +
    "\025\025\026\031\027\033\030\037\032\027\033\036\040" +
    "\030\052\026\053\035\056\032\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\006\003\007\015\004\001\001\000" +
    "\010\002\006\003\172\015\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\015" +
    "\016\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\037\012" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\044\014\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\154\001\001\000" +
    "\002\001\001\000\004\017\156\001\001\000\002\001\001" +
    "\000\004\006\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\171\012\023\001\001\000\004\012\040\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public Nodo raiz;

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }


    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCSS$actions {



  private final SintacticoCSS parser;

  /** Constructor */
  CUP$SintacticoCSS$actions(SintacticoCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCSS$do_action(
    int                        CUP$SintacticoCSS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCSS$parser,
    java.util.Stack            CUP$SintacticoCSS$stack,
    int                        CUP$SintacticoCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCSS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TAlineado ::= centrado 
            {
              Nodo RESULT =null;
		int cenleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String cen = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
        Nodo cuerpo = new Nodo("centrado",cenleft,cenright);
     
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TAlineado",9, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TAlineado ::= justificado 
            {
              Nodo RESULT =null;
		int jusleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int jusright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String jus = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
        Nodo cuerpo = new Nodo("justificado",jusleft,jusright);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TAlineado",9, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TAlineado ::= derecha 
            {
              Nodo RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String der = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
        Nodo cuerpo = new Nodo("derecha",derleft,derright);
        RESULT = cuerpo;
    
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TAlineado",9, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TAlineado ::= izquierda 
            {
              Nodo RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String iz = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
        Nodo cuerpo = new Nodo("izquierda",izleft,izright);
        RESULT = cuerpo;
    
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TAlineado",9, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TFormato ::= justificado 
            {
              Nodo RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int capright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("justificado",capleft,capright);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TFormato",10, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TFormato ::= capitalt 
            {
              Nodo RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int capright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("capitalt",capleft,capright);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TFormato",10, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TFormato ::= negrilla 
            {
              Nodo RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int negright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String neg = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("negrilla",negleft,negright);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TFormato",10, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TFormato ::= minuscula 
            {
              Nodo RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int miright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String mi = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("minuscula",mileft,miright);
        RESULT = cuerpo;
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TFormato",10, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TFormato ::= mayuscula 
            {
              Nodo RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("mayuscula",maleft,maright);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TFormato",10, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ContenidoFormato ::= TFormato 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
  Nodo cuerpo =new Nodo("Tipo",opleft,opright);
  cuerpo.hijos.add(op);
  RESULT =cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ContenidoFormato",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ContenidoFormato ::= ContenidoFormato coma TFormato 
            {
              Nodo RESULT =null;
		int conalleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int conalright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo conal = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		int talleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int talright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo tal = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
conal.hijos.add(tal);
RESULT =conal;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ContenidoFormato",7, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TVal ::= valDecimal 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo numero=new Nodo(val.toString(),valleft,valright);

RESULT = numero;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TVal",2, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TVal ::= TVal menos valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
int res =     (int) Math.round((pnum-snum));
tv.valor=String.valueOf(res);

RESULT = tv;


              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TVal",2, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TVal ::= TVal div valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
int res =     (int) Math.round((pnum/snum));
tv.valor=String.valueOf(res);

RESULT = tv;


              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TVal",2, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TVal ::= TVal por valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
int res =     (int) Math.round((pnum*snum));
tv.valor=String.valueOf(res);

RESULT = tv;


              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TVal",2, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TVal ::= TVal mas valDecimal 
            {
              Nodo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo tv = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		

double pnum = Double.parseDouble(tv.valor);
double snum = Double.parseDouble(val.toString());
int res =     (int) Math.round((pnum+snum));
tv.valor=String.valueOf(res);

RESULT = tv;


              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("TVal",2, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ConcatCad ::= stringcad 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
String cadena= cad.replace("\"","");
Nodo strin =new Nodo(cadena,cadleft,cadright);
RESULT = strin;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ConcatCad",13, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConcatCad ::= ConcatCad mas stringcad 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int catright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
String concatenar = cat.replace("\"","");
cad.valor=cad.valor+concatenar;
RESULT = cad;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ConcatCad",13, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ValBool ::= falsebool 
            {
              Nodo RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String fa = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo valor =new Nodo("false",faleft,faright);
    RESULT = valor;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ValBool",4, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ValBool ::= truebool 
            {
              Nodo RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
    Nodo valor =new Nodo("true",trleft,trright);
    RESULT = valor;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ValBool",4, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Direccion ::= vertical 
            {
              Nodo RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String ve = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo valor =new Nodo("vertical",veleft,veright);
    RESULT = valor;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("Direccion",5, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Direccion ::= horizontal 
            {
              Nodo RESULT =null;
		int holeft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int horight = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		String ho = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
    Nodo valor =new Nodo("horizontal",holeft,horight);
    RESULT = valor;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("Direccion",5, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiqueta ::= colortext dosPuntos asignar ConcatCad puntoComa 
            {
              Nodo RESULT =null;
		int cotleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int cotright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String cot = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int stgleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int stgright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo stg = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
    Nodo colortext= new Nodo("ColorText",cotleft,cotright); 
    
    colortext.hijos.add(stg);
    RESULT = colortext;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiqueta ::= opaque dosPuntos asignar ValBool puntoComa 
            {
              Nodo RESULT =null;
		int opaleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int oparight = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String opa = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int vableft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int vabright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo vab = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
    Nodo opaque=new Nodo("opaque",opaleft,oparight);
    opaque.hijos.add(vab);
    RESULT = opaque;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiqueta ::= borde dosPuntos asignar corchL TVal coma ConcatCad coma ValBool corchR puntoComa 
            {
              Nodo RESULT =null;
		int borleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-10)).left;
		int borright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-10)).right;
		String bor = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-10)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-6)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-6)).right;
		Nodo vd = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-6)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		Nodo st = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo vb = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		
    Nodo borde= new Nodo("borde",borleft,borright);
    
    
    
    borde.hijos.add(vd);
    borde.hijos.add(st);
    borde.hijos.add(vb);
    RESULT = borde;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiqueta ::= visible dosPuntos asignar ValBool puntoComa 
            {
              Nodo RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo bo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
    Nodo visible = new Nodo("visible",vileft,viright);
    visible.hijos.add(bo);
    RESULT = visible;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiqueta ::= autoredimension dosPuntos asignar corchL ValBool coma Direccion corchR puntoComa 
            {
              Nodo RESULT =null;
		int areleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-8)).left;
		int areright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-8)).right;
		String are = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-8)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		Nodo bo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).right;
		Nodo di = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-2)).value;
		
      Nodo cuerpo = new Nodo("autoredimension",areleft,areright);
        
        cuerpo.hijos.add(bo);
        cuerpo.hijos.add(di);

        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta ::= fondoelemento dosPuntos asignar ConcatCad puntoComa 
            {
              Nodo RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
      Nodo cuerpo = new Nodo("fondoelemento",feleft,feright);
        cuerpo.hijos.add(val);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // etiqueta ::= tamtex dosPuntos asignar TVal puntoComa 
            {
              Nodo RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String ta = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int Tvalleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int Tvalright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo Tval = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
      Nodo cuerpo = new Nodo("tamtex",taleft,taright);
      cuerpo.hijos.add(Tval);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiqueta ::= letra dosPuntos asignar ConcatCad puntoComa 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int svalleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int svalright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo sval = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
      Nodo cuerpo = new Nodo("letra",leleft,leright);
      
    cuerpo.hijos.add(sval);
        RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiqueta ::= formato dosPuntos asignar ContenidoFormato puntoComa 
            {
              Nodo RESULT =null;
		int foleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int foright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String fo = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int confleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int confright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo conf = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
      Nodo formato = new Nodo("formato",foleft,foright);
        formato.hijos.add(conf);
        RESULT = formato;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiqueta ::= texto dosPuntos asignar ConcatCad puntoComa 
            {
              Nodo RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int valCleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int valCright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo valC = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
        Nodo cuerpo = new Nodo("Texto",teleft,teright);
        
        cuerpo.hijos.add(valC);
        RESULT = cuerpo;


              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiqueta ::= alineado dosPuntos asignar TAlineado puntoComa 
            {
              Nodo RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)).value;
		int conalleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int conalright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo conal = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
        Nodo cuerpo = new Nodo("Alineado",alleft,alright);
        cuerpo.hijos.add(conal);
        RESULT = cuerpo;


              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("etiqueta",8, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ContenidoID ::= etiqueta 
            {
              Nodo RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo et = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            Nodo cuerpo = new Nodo("ContenidoEstilo",etleft,etright);
            cuerpo.hijos.add(et);
            RESULT = cuerpo;    
            
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ContenidoID",6, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ContenidoID ::= ContenidoID etiqueta 
            {
              Nodo RESULT =null;
		int conrleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int conrright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo conr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo et = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            conr.hijos.add(et);
            RESULT = conr;
            
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("ContenidoID",6, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GrupID ::= id parL identificador parR puntoComa ContenidoID 
            {
              Nodo RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)).right;
		String gr = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).value;
		int conidleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int conidright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo conid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo=new Nodo("ID");


Nodo grupo =new Nodo(op.toString(),opleft,opright);

grupo.hijos.add(conid);
cuerpo.hijos.add(grupo);
RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("GrupID",12, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GrupID ::= grupoe parL identificador parR puntoComa ContenidoID 
            {
              Nodo RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)).right;
		String gr = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).value;
		int conidleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int conidright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo conid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		

Nodo cuerpo=new Nodo("Grupo");


Nodo grupo =new Nodo(op.toString(),opleft,opright);

grupo.hijos.add(conid);
cuerpo.hijos.add(grupo);
RESULT = cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("GrupID",12, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Grupos ::= GrupID 
            {
              Nodo RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo ne = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("ElementoOGrupo",neleft,neright);
cuerpo.hijos.add(ne);
RESULT =cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("Grupos",3, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Grupos ::= Grupos GrupID 
            {
              Nodo RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo gr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		int gileft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int giright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo gi = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
  gr.hijos.add(gi);
        RESULT = gr;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("Grupos",3, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NEstilo ::= identificador corchL Grupos corchR 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)).value;
		int conidleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int conidright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo conid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		
 Nodo cuerpo = new Nodo(op.toString(), opleft,opright);
        cuerpo.hijos.add(conid);
      
        RESULT = cuerpo;
       
    
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("NEstilo",11, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= NEstilo 
            {
              Nodo RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo ne = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("Estilos",neleft,neright);
cuerpo.hijos.add(ne);
RESULT =cuerpo;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= S NEstilo 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo ne = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		

        op.hijos.add(ne);
        RESULT = op;
       
    
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIAL ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("INICIAL",1, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAL ::= error INICIAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("INICIAL",1, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= S 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.peek()).value;
		
            parser.raiz=raiz;
        
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("INICIAL",1, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.elementAt(CUP$SintacticoCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCSS$parser.done_parsing();
          return CUP$SintacticoCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

