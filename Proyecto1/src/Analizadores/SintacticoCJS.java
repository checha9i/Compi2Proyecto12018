
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 06 16:50:00 CST 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 06 16:50:00 CST 2018
  */
public class SintacticoCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCJS() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\003\003" +
    "\000\002\045\007\000\002\045\005\000\002\045\005\000" +
    "\002\045\010\000\002\045\014\000\002\045\011\000\002" +
    "\045\006\000\002\045\004\000\002\045\007\000\002\045" +
    "\013\000\002\045\010\000\002\022\005\000\002\022\005" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\004\000\002\011\006\000\002\011\005" +
    "\000\002\011\005\000\002\044\005\000\002\057\007\000" +
    "\002\023\007\000\002\031\012\000\002\031\011\000\002" +
    "\031\011\000\002\031\010\000\002\021\005\000\002\021" +
    "\003\000\002\032\011\000\002\032\010\000\002\032\012" +
    "\000\002\032\011\000\002\033\006\000\002\033\005\000" +
    "\002\034\012\000\002\034\011\000\002\034\011\000\002" +
    "\037\004\000\002\037\003\000\002\040\006\000\002\040" +
    "\005\000\002\046\005\000\002\035\017\000\002\035\016" +
    "\000\002\036\011\000\002\036\010\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\004\000\002\026\005\000\002\026\004\000\002\026" +
    "\004\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\004\000\002" +
    "\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\034\002\ufffe\003\024\013\033\043\015\045" +
    "\020\050\026\054\007\055\032\064\031\066\016\071\005" +
    "\072\011\075\025\001\002\000\040\002\uffeb\013\uffeb\043" +
    "\uffeb\045\uffeb\050\uffeb\054\uffeb\055\uffeb\064\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\075\uffeb\102\uffeb\001" +
    "\002\000\004\076\305\001\002\000\032\002\000\013\033" +
    "\043\015\045\020\050\026\054\007\055\032\064\031\066" +
    "\016\071\005\072\011\075\025\001\002\000\004\076\301" +
    "\001\002\000\040\002\uffe8\013\uffe8\043\uffe8\045\uffe8\050" +
    "\uffe8\054\uffe8\055\uffe8\064\uffe8\066\uffe8\067\uffe8\070\uffe8" +
    "\071\uffe8\072\uffe8\075\uffe8\102\uffe8\001\002\000\004\076" +
    "\272\001\002\000\040\002\uffee\013\uffee\043\uffee\045\uffee" +
    "\050\uffee\054\uffee\055\uffee\064\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\075\uffee\102\uffee\001\002\000\040" +
    "\002\uffea\013\uffea\043\uffea\045\uffea\050\uffea\054\uffea\055" +
    "\uffea\064\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea" +
    "\075\uffea\102\uffea\001\002\000\040\002\uffe7\013\uffe7\043" +
    "\uffe7\045\uffe7\050\uffe7\054\uffe7\055\uffe7\064\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\071\uffe7\072\uffe7\075\uffe7\102\uffe7\001" +
    "\002\000\004\076\266\001\002\000\004\076\243\001\002" +
    "\000\040\002\ufffc\013\ufffc\043\ufffc\045\ufffc\050\ufffc\054" +
    "\ufffc\055\ufffc\064\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\072\ufffc\075\ufffc\102\ufffc\001\002\000\034\004\055\005" +
    "\061\006\063\007\051\010\062\012\064\013\065\020\056" +
    "\027\047\046\054\047\046\055\032\076\060\001\002\000" +
    "\004\002\240\001\002\000\040\002\uffec\013\uffec\043\uffec" +
    "\045\uffec\050\uffec\054\uffec\055\uffec\064\uffec\066\uffec\067" +
    "\uffec\070\uffec\071\uffec\072\uffec\075\uffec\102\uffec\001\002" +
    "\000\040\002\uffe9\013\uffe9\043\uffe9\045\uffe9\050\uffe9\054" +
    "\uffe9\055\uffe9\064\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\075\uffe9\102\uffe9\001\002\000\034\002\ufffe\003" +
    "\024\013\033\043\015\045\020\050\026\054\007\055\032" +
    "\064\031\066\016\071\005\072\011\075\025\001\002\000" +
    "\004\036\236\001\002\000\004\013\206\001\002\000\040" +
    "\002\uffe5\013\uffe5\043\uffe5\045\uffe5\050\uffe5\054\uffe5\055" +
    "\uffe5\064\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5" +
    "\075\uffe5\102\uffe5\001\002\000\040\002\uffe6\013\uffe6\043" +
    "\uffe6\045\uffe6\050\uffe6\054\uffe6\055\uffe6\064\uffe6\066\uffe6" +
    "\067\uffe6\070\uffe6\071\uffe6\072\uffe6\075\uffe6\102\uffe6\001" +
    "\002\000\004\076\170\001\002\000\004\013\147\001\002" +
    "\000\016\036\041\046\036\047\035\076\042\103\037\105" +
    "\040\001\002\000\040\002\uffed\013\uffed\043\uffed\045\uffed" +
    "\050\uffed\054\uffed\055\uffed\064\uffed\066\uffed\067\uffed\070" +
    "\uffed\071\uffed\072\uffed\075\uffed\102\uffed\001\002\000\004" +
    "\036\146\001\002\000\004\036\145\001\002\000\034\004" +
    "\055\005\061\006\063\007\051\010\062\012\064\013\065" +
    "\020\056\027\047\046\054\047\046\055\032\076\060\001" +
    "\002\000\036\004\055\005\061\006\063\007\051\010\062" +
    "\012\064\013\065\020\056\027\047\046\054\047\046\055" +
    "\032\076\060\103\053\001\002\000\040\002\ufff4\013\ufff4" +
    "\043\ufff4\045\ufff4\050\ufff4\054\ufff4\055\ufff4\064\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\075\ufff4\102\ufff4" +
    "\001\002\000\004\077\043\001\002\000\004\036\044\001" +
    "\002\000\040\002\uffe3\013\uffe3\043\uffe3\045\uffe3\050\uffe3" +
    "\054\uffe3\055\uffe3\064\uffe3\066\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\075\uffe3\102\uffe3\001\002\000\054\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\046\uffaa\047\uffaa\077\uffaa\102\uffaa\104\uffaa\105" +
    "\uffaa\001\002\000\054\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\046\uffa6\047\uffa6" +
    "\077\uffa6\102\uffa6\104\uffa6\105\uffa6\001\002\000\032\004" +
    "\055\005\061\006\063\007\051\010\062\012\064\013\065" +
    "\020\056\046\054\047\046\055\032\076\060\001\002\000" +
    "\054\017\117\020\120\021\114\022\122\023\121\024\uffba" +
    "\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\046\116\047\115\077\uffba\102\uffba" +
    "\104\uffba\105\uffba\001\002\000\054\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\046" +
    "\uffb0\047\uffb0\077\uffb0\102\uffb0\104\uffb0\105\uffb0\001\002" +
    "\000\012\024\073\025\072\026\070\036\133\001\002\000" +
    "\034\004\055\005\061\006\063\007\051\010\062\012\064" +
    "\013\065\020\056\027\047\046\054\047\046\055\032\076" +
    "\060\001\002\000\054\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\046\uffa7\047\uffa7" +
    "\077\uffa7\102\uffa7\104\uffa7\105\uffa7\001\002\000\054\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\046\uffad\047\uffad\077\uffad\102\uffad\104\uffad" +
    "\105\uffad\001\002\000\032\004\055\005\061\006\063\007" +
    "\051\010\062\012\064\013\065\020\056\046\054\047\046" +
    "\055\032\076\060\001\002\000\036\024\uffc2\025\uffc2\026" +
    "\uffc2\030\103\031\102\032\100\033\077\034\101\035\104" +
    "\036\uffc2\077\uffc2\102\uffc2\104\uffc2\105\uffc2\001\002\000" +
    "\034\004\055\005\061\006\063\007\051\010\062\012\064" +
    "\013\065\020\056\027\047\046\054\047\046\055\032\076" +
    "\060\001\002\000\054\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\046\uffae\047\uffae" +
    "\077\uffae\102\uffae\104\uffae\105\uffae\001\002\000\054\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\046\uffac\047\uffac\077\uffac\102\uffac\104\uffac" +
    "\105\uffac\001\002\000\054\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\046\uffaf\047" +
    "\uffaf\077\uffaf\102\uffaf\104\uffaf\105\uffaf\001\002\000\054" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\046\uffab\047\uffab\077\uffab\102\uffab\104" +
    "\uffab\105\uffab\001\002\000\054\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\046\uffa9" +
    "\047\uffa9\077\uffa9\102\uffa9\104\uffa9\105\uffa9\001\002\000" +
    "\054\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\046\uffa8\047\uffa8\077\uffa8\102\uffa8" +
    "\104\uffa8\105\uffa8\001\002\000\012\024\073\025\072\026" +
    "\070\077\071\001\002\000\034\004\055\005\061\006\063" +
    "\007\051\010\062\012\064\013\065\020\056\027\047\046" +
    "\054\047\046\055\032\076\060\001\002\000\054\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\046\uffb3\047\uffb3\077\uffb3\102\uffb3\104\uffb3\105" +
    "\uffb3\001\002\000\034\004\055\005\061\006\063\007\051" +
    "\010\062\012\064\013\065\020\056\027\047\046\054\047" +
    "\046\055\032\076\060\001\002\000\034\004\055\005\061" +
    "\006\063\007\051\010\062\012\064\013\065\020\056\027" +
    "\047\046\054\047\046\055\032\076\060\001\002\000\022" +
    "\024\uffc5\025\072\026\070\036\uffc5\077\uffc5\102\uffc5\104" +
    "\uffc5\105\uffc5\001\002\000\022\024\uffc3\025\uffc3\026\uffc3" +
    "\036\uffc3\077\uffc3\102\uffc3\104\uffc3\105\uffc3\001\002\000" +
    "\022\024\uffc4\025\072\026\uffc4\036\uffc4\077\uffc4\102\uffc4" +
    "\104\uffc4\105\uffc4\001\002\000\034\004\055\005\061\006" +
    "\063\007\051\010\062\012\064\013\065\020\056\027\047" +
    "\046\054\047\046\055\032\076\060\001\002\000\034\004" +
    "\055\005\061\006\063\007\051\010\062\012\064\013\065" +
    "\020\056\027\047\046\054\047\046\055\032\076\060\001" +
    "\002\000\034\004\055\005\061\006\063\007\051\010\062" +
    "\012\064\013\065\020\056\027\047\046\054\047\046\055" +
    "\032\076\060\001\002\000\034\004\055\005\061\006\063" +
    "\007\051\010\062\012\064\013\065\020\056\027\047\046" +
    "\054\047\046\055\032\076\060\001\002\000\034\004\055" +
    "\005\061\006\063\007\051\010\062\012\064\013\065\020" +
    "\056\027\047\046\054\047\046\055\032\076\060\001\002" +
    "\000\034\004\055\005\061\006\063\007\051\010\062\012" +
    "\064\013\065\020\056\027\047\046\054\047\046\055\032" +
    "\076\060\001\002\000\022\024\uffc0\025\uffc0\026\uffc0\036" +
    "\uffc0\077\uffc0\102\uffc0\104\uffc0\105\uffc0\001\002\000\022" +
    "\024\uffbf\025\uffbf\026\uffbf\036\uffbf\077\uffbf\102\uffbf\104" +
    "\uffbf\105\uffbf\001\002\000\022\024\uffbe\025\uffbe\026\uffbe" +
    "\036\uffbe\077\uffbe\102\uffbe\104\uffbe\105\uffbe\001\002\000" +
    "\022\024\uffc1\025\uffc1\026\uffc1\036\uffc1\077\uffc1\102\uffc1" +
    "\104\uffc1\105\uffc1\001\002\000\022\024\uffbd\025\uffbd\026" +
    "\uffbd\036\uffbd\077\uffbd\102\uffbd\104\uffbd\105\uffbd\001\002" +
    "\000\022\024\uffbc\025\uffbc\026\uffbc\036\uffbc\077\uffbc\102" +
    "\uffbc\104\uffbc\105\uffbc\001\002\000\054\017\uffb4\020\uffb4" +
    "\021\114\022\122\023\121\024\uffb4\025\uffb4\026\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\046\116\047\115\077\uffb4\102\uffb4\104\uffb4\105\uffb4\001" +
    "\002\000\032\004\055\005\061\006\063\007\051\010\062" +
    "\012\064\013\065\020\056\046\054\047\046\055\032\076" +
    "\060\001\002\000\054\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\046\uffb1\047\uffb1" +
    "\077\uffb1\102\uffb1\104\uffb1\105\uffb1\001\002\000\054\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\046\uffb2\047\uffb2\077\uffb2\102\uffb2\104\uffb2" +
    "\105\uffb2\001\002\000\032\004\055\005\061\006\063\007" +
    "\051\010\062\012\064\013\065\020\056\046\054\047\046" +
    "\055\032\076\060\001\002\000\032\004\055\005\061\006" +
    "\063\007\051\010\062\012\064\013\065\020\056\046\054" +
    "\047\046\055\032\076\060\001\002\000\032\004\055\005" +
    "\061\006\063\007\051\010\062\012\064\013\065\020\056" +
    "\046\054\047\046\055\032\076\060\001\002\000\032\004" +
    "\055\005\061\006\063\007\051\010\062\012\064\013\065" +
    "\020\056\046\054\047\046\055\032\076\060\001\002\000" +
    "\054\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\121\024\uffb7" +
    "\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\046\116\047\115\077\uffb7\102\uffb7" +
    "\104\uffb7\105\uffb7\001\002\000\054\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\121\024\uffb5\025\uffb5\026\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\046" +
    "\116\047\115\077\uffb5\102\uffb5\104\uffb5\105\uffb5\001\002" +
    "\000\054\017\uffb8\020\uffb8\021\114\022\122\023\121\024" +
    "\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\046\116\047\115\077\uffb8\102" +
    "\uffb8\104\uffb8\105\uffb8\001\002\000\054\017\uffb9\020\uffb9" +
    "\021\114\022\122\023\121\024\uffb9\025\uffb9\026\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\046\116\047\115\077\uffb9\102\uffb9\104\uffb9\105\uffb9\001" +
    "\002\000\054\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\121" +
    "\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\046\116\047\115\077\uffb6" +
    "\102\uffb6\104\uffb6\105\uffb6\001\002\000\012\024\073\025" +
    "\072\026\070\102\131\001\002\000\004\036\132\001\002" +
    "\000\040\002\ufff1\013\ufff1\043\ufff1\045\ufff1\050\ufff1\054" +
    "\ufff1\055\ufff1\064\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\075\ufff1\102\ufff1\001\002\000\040\002\ufff5\013" +
    "\ufff5\043\ufff5\045\ufff5\050\ufff5\054\ufff5\055\ufff5\064\ufff5" +
    "\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\075\ufff5\102" +
    "\ufff5\001\002\000\054\017\117\020\120\021\114\022\122" +
    "\023\121\024\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\046\116\047\115" +
    "\077\uffbb\102\uffbb\104\uffbb\105\uffbb\001\002\000\012\024" +
    "\073\025\072\026\070\102\136\001\002\000\006\036\140" +
    "\105\137\001\002\000\004\103\141\001\002\000\040\002" +
    "\ufff3\013\ufff3\043\ufff3\045\ufff3\050\ufff3\054\ufff3\055\ufff3" +
    "\064\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\075" +
    "\ufff3\102\ufff3\001\002\000\034\004\055\005\061\006\063" +
    "\007\051\010\062\012\064\013\065\020\056\027\047\046" +
    "\054\047\046\055\032\076\060\001\002\000\012\024\073" +
    "\025\072\026\070\102\143\001\002\000\004\036\144\001" +
    "\002\000\040\002\ufff2\013\ufff2\043\ufff2\045\ufff2\050\ufff2" +
    "\054\ufff2\055\ufff2\064\ufff2\066\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\075\ufff2\102\ufff2\001\002\000\040\002\uffe2" +
    "\013\uffe2\043\uffe2\045\uffe2\050\uffe2\054\uffe2\055\uffe2\064" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\075\uffe2" +
    "\102\uffe2\001\002\000\040\002\uffe1\013\uffe1\043\uffe1\045" +
    "\uffe1\050\uffe1\054\uffe1\055\uffe1\064\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\075\uffe1\102\uffe1\001\002\000" +
    "\004\076\150\001\002\000\036\004\055\005\061\006\063" +
    "\007\051\010\062\012\064\013\065\020\056\027\047\046" +
    "\054\047\046\055\032\076\060\077\152\001\002\000\014" +
    "\024\073\025\072\026\070\077\uffd8\104\uffd8\001\002\000" +
    "\004\103\164\001\002\000\006\077\154\104\155\001\002" +
    "\000\004\103\157\001\002\000\034\004\055\005\061\006" +
    "\063\007\051\010\062\012\064\013\065\020\056\027\047" +
    "\046\054\047\046\055\032\076\060\001\002\000\014\024" +
    "\073\025\072\026\070\077\uffd9\104\uffd9\001\002\000\032" +
    "\013\033\043\015\045\020\050\026\054\007\055\032\064" +
    "\031\066\016\071\005\072\011\075\025\102\161\001\002" +
    "\000\032\013\033\043\015\045\020\050\026\054\007\055" +
    "\032\064\031\066\016\071\005\072\011\075\025\102\162" +
    "\001\002\000\110\002\uffdb\013\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\043" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\054\uffdb\055\uffdb" +
    "\064\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\075" +
    "\uffdb\077\uffdb\102\uffdb\104\uffdb\105\uffdb\001\002\000\110" +
    "\002\uffdd\013\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\043\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\054\uffdd\055\uffdd\064\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\072\uffdd\075\uffdd\077\uffdd\102" +
    "\uffdd\104\uffdd\105\uffdd\001\002\000\040\002\ufffd\013\ufffd" +
    "\043\ufffd\045\ufffd\050\ufffd\054\ufffd\055\ufffd\064\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\075\ufffd\102\ufffd" +
    "\001\002\000\032\013\033\043\015\045\020\050\026\054" +
    "\007\055\032\064\031\066\016\071\005\072\011\075\025" +
    "\102\165\001\002\000\110\002\uffda\013\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda\054\uffda" +
    "\055\uffda\064\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\075\uffda\077\uffda\102\uffda\104\uffda\105\uffda\001\002" +
    "\000\032\013\033\043\015\045\020\050\026\054\007\055" +
    "\032\064\031\066\016\071\005\072\011\075\025\102\167" +
    "\001\002\000\110\002\uffdc\013\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\043" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc" +
    "\064\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\075" +
    "\uffdc\077\uffdc\102\uffdc\104\uffdc\105\uffdc\001\002\000\034" +
    "\004\055\005\061\006\063\007\051\010\062\012\064\013" +
    "\065\020\056\027\047\046\054\047\046\055\032\076\060" +
    "\001\002\000\012\024\073\025\072\026\070\077\172\001" +
    "\002\000\004\103\173\001\002\000\032\013\033\043\015" +
    "\045\020\050\026\054\007\055\032\064\031\066\016\071" +
    "\005\072\011\075\025\102\175\001\002\000\032\013\033" +
    "\043\015\045\020\050\026\054\007\055\032\064\031\066" +
    "\016\071\005\072\011\075\025\102\204\001\002\000\042" +
    "\002\uffd6\013\uffd6\043\uffd6\045\uffd6\050\uffd6\054\uffd6\055" +
    "\uffd6\064\uffd6\065\176\066\uffd6\067\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\075\uffd6\102\uffd6\001\002\000\004\103\200\001" +
    "\002\000\040\002\uffd4\013\uffd4\043\uffd4\045\uffd4\050\uffd4" +
    "\054\uffd4\055\uffd4\064\uffd4\066\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\075\uffd4\102\uffd4\001\002\000\032\013\033" +
    "\043\015\045\020\050\026\054\007\055\032\064\031\066" +
    "\016\071\005\072\011\075\025\102\202\001\002\000\032" +
    "\013\033\043\015\045\020\050\026\054\007\055\032\064" +
    "\031\066\016\071\005\072\011\075\025\102\203\001\002" +
    "\000\040\002\uffd2\013\uffd2\043\uffd2\045\uffd2\050\uffd2\054" +
    "\uffd2\055\uffd2\064\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2" +
    "\072\uffd2\075\uffd2\102\uffd2\001\002\000\040\002\uffd3\013" +
    "\uffd3\043\uffd3\045\uffd3\050\uffd3\054\uffd3\055\uffd3\064\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\075\uffd3\102" +
    "\uffd3\001\002\000\042\002\uffd7\013\uffd7\043\uffd7\045\uffd7" +
    "\050\uffd7\054\uffd7\055\uffd7\064\uffd7\065\176\066\uffd7\067" +
    "\uffd7\070\uffd7\071\uffd7\072\uffd7\075\uffd7\102\uffd7\001\002" +
    "\000\040\002\uffd5\013\uffd5\043\uffd5\045\uffd5\050\uffd5\054" +
    "\uffd5\055\uffd5\064\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5" +
    "\072\uffd5\075\uffd5\102\uffd5\001\002\000\012\036\216\103" +
    "\213\104\214\105\215\001\002\000\006\036\211\104\210" +
    "\001\002\000\004\013\212\001\002\000\040\002\ufffa\013" +
    "\ufffa\043\ufffa\045\ufffa\050\ufffa\054\ufffa\055\ufffa\064\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\075\ufffa\102" +
    "\ufffa\001\002\000\006\036\ufff0\104\ufff0\001\002\000\034" +
    "\004\055\005\061\006\063\007\051\010\062\012\064\013" +
    "\065\020\056\027\047\046\054\047\046\055\032\076\060" +
    "\001\002\000\004\013\225\001\002\000\036\004\055\005" +
    "\061\006\063\007\051\010\062\012\064\013\065\020\056" +
    "\027\047\046\054\047\046\055\032\076\060\103\220\001" +
    "\002\000\040\002\ufff9\013\ufff9\043\ufff9\045\ufff9\050\ufff9" +
    "\054\ufff9\055\ufff9\064\ufff9\066\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\075\ufff9\102\ufff9\001\002\000\012\024\073" +
    "\025\072\026\070\036\224\001\002\000\034\004\055\005" +
    "\061\006\063\007\051\010\062\012\064\013\065\020\056" +
    "\027\047\046\054\047\046\055\032\076\060\001\002\000" +
    "\012\024\073\025\072\026\070\102\222\001\002\000\004" +
    "\036\223\001\002\000\040\002\ufff6\013\ufff6\043\ufff6\045" +
    "\ufff6\050\ufff6\054\ufff6\055\ufff6\064\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\075\ufff6\102\ufff6\001\002\000" +
    "\040\002\ufffb\013\ufffb\043\ufffb\045\ufffb\050\ufffb\054\ufffb" +
    "\055\ufffb\064\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\075\ufffb\102\ufffb\001\002\000\006\036\uffef\104\uffef" +
    "\001\002\000\012\024\073\025\072\026\070\102\227\001" +
    "\002\000\006\036\231\105\230\001\002\000\004\103\232" +
    "\001\002\000\040\002\ufff8\013\ufff8\043\ufff8\045\ufff8\050" +
    "\ufff8\054\ufff8\055\ufff8\064\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\075\ufff8\102\ufff8\001\002\000\034\004" +
    "\055\005\061\006\063\007\051\010\062\012\064\013\065" +
    "\020\056\027\047\046\054\047\046\055\032\076\060\001" +
    "\002\000\012\024\073\025\072\026\070\102\234\001\002" +
    "\000\004\036\235\001\002\000\040\002\ufff7\013\ufff7\043" +
    "\ufff7\045\ufff7\050\ufff7\054\ufff7\055\ufff7\064\ufff7\066\ufff7" +
    "\067\ufff7\070\ufff7\071\ufff7\072\ufff7\075\ufff7\102\ufff7\001" +
    "\002\000\040\002\uffe4\013\uffe4\043\uffe4\045\uffe4\050\uffe4" +
    "\054\uffe4\055\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\075\uffe4\102\uffe4\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\012\024\073\025" +
    "\072\026\070\036\242\001\002\000\040\002\uffe0\013\uffe0" +
    "\043\uffe0\045\uffe0\050\uffe0\054\uffe0\055\uffe0\064\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\075\uffe0\102\uffe0" +
    "\001\002\000\032\004\055\005\061\006\063\007\051\010" +
    "\062\012\064\013\065\020\056\046\054\047\046\055\032" +
    "\076\060\001\002\000\022\017\117\020\120\021\114\022" +
    "\122\023\121\046\116\047\115\077\245\001\002\000\004" +
    "\103\246\001\002\000\006\067\251\070\252\001\002\000" +
    "\010\067\251\070\252\102\263\001\002\000\004\102\261" +
    "\001\002\000\034\004\055\005\061\006\063\007\051\010" +
    "\062\012\064\013\065\020\056\027\047\046\054\047\046" +
    "\055\032\076\060\001\002\000\004\105\254\001\002\000" +
    "\010\067\uffcd\070\uffcd\102\uffcd\001\002\000\030\013\033" +
    "\043\015\045\020\050\026\054\007\055\032\064\031\066" +
    "\016\071\005\072\011\075\025\001\002\000\032\013\033" +
    "\043\015\045\020\050\026\054\007\055\032\064\031\066" +
    "\016\071\005\072\011\075\025\102\uffca\001\002\000\012" +
    "\024\073\025\072\026\070\105\257\001\002\000\036\013" +
    "\033\043\015\045\020\050\026\054\007\055\032\064\031" +
    "\066\016\067\uffcb\070\uffcb\071\005\072\011\075\025\102" +
    "\uffcb\001\002\000\036\013\033\043\015\045\020\050\026" +
    "\054\007\055\032\064\031\066\016\067\uffcc\070\uffcc\071" +
    "\005\072\011\075\025\102\uffcc\001\002\000\040\002\uffcf" +
    "\013\uffcf\043\uffcf\045\uffcf\050\uffcf\054\uffcf\055\uffcf\064" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\075\uffcf" +
    "\102\uffcf\001\002\000\004\102\265\001\002\000\040\002" +
    "\uffd0\013\uffd0\043\uffd0\045\uffd0\050\uffd0\054\uffd0\055\uffd0" +
    "\064\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\075" +
    "\uffd0\102\uffd0\001\002\000\010\067\uffce\070\uffce\102\uffce" +
    "\001\002\000\040\002\uffd1\013\uffd1\043\uffd1\045\uffd1\050" +
    "\uffd1\054\uffd1\055\uffd1\064\uffd1\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\075\uffd1\102\uffd1\001\002\000\034\004" +
    "\055\005\061\006\063\007\051\010\062\012\064\013\065" +
    "\020\056\027\047\046\054\047\046\055\032\076\060\001" +
    "\002\000\012\024\073\025\072\026\070\077\270\001\002" +
    "\000\004\036\271\001\002\000\040\002\uffdf\013\uffdf\043" +
    "\uffdf\045\uffdf\050\uffdf\054\uffdf\055\uffdf\064\uffdf\066\uffdf" +
    "\067\uffdf\070\uffdf\071\uffdf\072\uffdf\075\uffdf\102\uffdf\001" +
    "\002\000\034\004\055\005\061\006\063\007\051\010\062" +
    "\012\064\013\065\020\056\027\047\046\054\047\046\055" +
    "\032\076\060\001\002\000\012\024\073\025\072\026\070" +
    "\077\274\001\002\000\004\103\275\001\002\000\032\013" +
    "\033\043\015\045\020\050\026\054\007\055\032\064\031" +
    "\066\016\071\005\072\011\075\025\102\276\001\002\000" +
    "\040\002\uffc6\013\uffc6\043\uffc6\045\uffc6\050\uffc6\054\uffc6" +
    "\055\uffc6\064\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072" +
    "\uffc6\075\uffc6\102\uffc6\001\002\000\032\013\033\043\015" +
    "\045\020\050\026\054\007\055\032\064\031\066\016\071" +
    "\005\072\011\075\025\102\300\001\002\000\040\002\uffc7" +
    "\013\uffc7\043\uffc7\045\uffc7\050\uffc7\054\uffc7\055\uffc7\064" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\075\uffc7" +
    "\102\uffc7\001\002\000\034\004\055\005\061\006\063\007" +
    "\051\010\062\012\064\013\065\020\056\027\047\046\054" +
    "\047\046\055\032\076\060\001\002\000\012\024\073\025" +
    "\072\026\070\077\303\001\002\000\004\036\304\001\002" +
    "\000\040\002\uffde\013\uffde\043\uffde\045\uffde\050\uffde\054" +
    "\uffde\055\uffde\064\uffde\066\uffde\067\uffde\070\uffde\071\uffde" +
    "\072\uffde\075\uffde\102\uffde\001\002\000\004\013\306\001" +
    "\002\000\004\105\307\001\002\000\034\004\055\005\061" +
    "\006\063\007\051\010\062\012\064\013\065\020\056\027" +
    "\047\046\054\047\046\055\032\076\060\001\002\000\012" +
    "\024\073\025\072\026\070\036\311\001\002\000\034\004" +
    "\055\005\061\006\063\007\051\010\062\012\064\013\065" +
    "\020\056\027\047\046\054\047\046\055\032\076\060\001" +
    "\002\000\012\024\073\025\072\026\070\036\313\001\002" +
    "\000\034\004\055\005\061\006\063\007\051\010\062\012" +
    "\064\013\065\020\056\027\047\046\054\047\046\055\032" +
    "\076\060\001\002\000\012\024\073\025\072\026\070\077" +
    "\315\001\002\000\004\103\316\001\002\000\032\013\033" +
    "\043\015\045\020\050\026\054\007\055\032\064\031\066" +
    "\016\071\005\072\011\075\025\102\320\001\002\000\032" +
    "\013\033\043\015\045\020\050\026\054\007\055\032\064" +
    "\031\066\016\071\005\072\011\075\025\102\321\001\002" +
    "\000\040\002\uffc8\013\uffc8\043\uffc8\045\uffc8\050\uffc8\054" +
    "\uffc8\055\uffc8\064\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\075\uffc8\102\uffc8\001\002\000\040\002\uffc9\013" +
    "\uffc9\043\uffc9\045\uffc9\050\uffc9\054\uffc9\055\uffc9\064\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\075\uffc9\102" +
    "\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\034\002\020\003\005\011\016\023\011\031" +
    "\003\032\022\034\007\035\013\036\026\044\021\045\012" +
    "\047\027\057\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\162\023\011\031\003\032\022\034\007" +
    "\035\013\036\026\044\021\045\012\047\027\057\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\240\025\056\026\047\031\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\236" +
    "\003\005\011\016\023\011\031\003\032\022\034\007\035" +
    "\013\036\026\044\021\045\012\047\027\057\033\001\001" +
    "\000\002\001\001\000\004\022\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\134\025\056\026\047\031\044" +
    "\001\001\000\012\024\051\025\056\026\047\031\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\133\031\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\127\025\056\026" +
    "\047\031\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\112\031\044\001\001\000\002\001\001\000" +
    "\012\024\066\025\056\026\047\031\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\075\025\056\026\047\031\044\001" +
    "\001\000\002\001\001\000\012\024\074\025\056\026\047" +
    "\031\044\001\001\000\012\024\073\025\056\026\047\031" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\111\026\047\031\044\001\001\000" +
    "\010\025\110\026\047\031\044\001\001\000\010\025\107" +
    "\026\047\031\044\001\001\000\010\025\106\026\047\031" +
    "\044\001\001\000\010\025\105\026\047\031\044\001\001" +
    "\000\010\025\104\026\047\031\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\126\031\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\125\031\044\001\001\000\006\026" +
    "\124\031\044\001\001\000\006\026\123\031\044\001\001" +
    "\000\006\026\122\031\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\141\025\056\026\047\031\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\152" +
    "\024\150\025\056\026\047\031\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\155\025\056\026\047\031\044\001\001\000" +
    "\002\001\001\000\032\003\157\011\016\023\011\031\003" +
    "\032\022\034\007\035\013\036\026\044\021\045\012\047" +
    "\027\057\033\001\001\000\030\011\162\023\011\031\003" +
    "\032\022\034\007\035\013\036\026\044\021\045\012\047" +
    "\027\057\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\165\011\016\023\011\031" +
    "\003\032\022\034\007\035\013\036\026\044\021\045\012" +
    "\047\027\057\033\001\001\000\002\001\001\000\030\011" +
    "\162\023\011\031\003\032\022\034\007\035\013\036\026" +
    "\044\021\045\012\047\027\057\033\001\001\000\002\001" +
    "\001\000\012\024\170\025\056\026\047\031\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\173\011" +
    "\016\023\011\031\003\032\022\034\007\035\013\036\026" +
    "\044\021\045\012\047\027\057\033\001\001\000\030\011" +
    "\162\023\011\031\003\032\022\034\007\035\013\036\026" +
    "\044\021\045\012\047\027\057\033\001\001\000\004\033" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\200\011\016\023\011\031\003\032\022\034\007\035" +
    "\013\036\026\044\021\045\012\047\027\057\033\001\001" +
    "\000\030\011\162\023\011\031\003\032\022\034\007\035" +
    "\013\036\026\044\021\045\012\047\027\057\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\225\025\056\026\047\031\044\001\001\000\002" +
    "\001\001\000\012\024\216\025\056\026\047\031\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\220" +
    "\025\056\026\047\031\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\232\025\056\026\047" +
    "\031\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\243\031\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\246\040\252\046\247\001\001\000\006\040" +
    "\263\046\261\001\001\000\002\001\001\000\012\024\255" +
    "\025\056\026\047\031\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\254\011\016\023\011\031\003" +
    "\032\022\034\007\035\013\036\026\044\021\045\012\047" +
    "\027\057\033\001\001\000\030\011\162\023\011\031\003" +
    "\032\022\034\007\035\013\036\026\044\021\045\012\047" +
    "\027\057\033\001\001\000\002\001\001\000\032\003\257" +
    "\011\016\023\011\031\003\032\022\034\007\035\013\036" +
    "\026\044\021\045\012\047\027\057\033\001\001\000\030" +
    "\011\162\023\011\031\003\032\022\034\007\035\013\036" +
    "\026\044\021\045\012\047\027\057\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\266\025\056\026\047" +
    "\031\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\272\025\056\026\047\031\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\276\011\016\023\011\031\003\032\022\034\007\035\013" +
    "\036\026\044\021\045\012\047\027\057\033\001\001\000" +
    "\002\001\001\000\030\011\162\023\011\031\003\032\022" +
    "\034\007\035\013\036\026\044\021\045\012\047\027\057" +
    "\033\001\001\000\002\001\001\000\012\024\301\025\056" +
    "\026\047\031\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\307\025\056\026\047\031\044\001\001\000" +
    "\002\001\001\000\012\024\311\025\056\026\047\031\044" +
    "\001\001\000\002\001\001\000\012\024\313\025\056\026" +
    "\047\031\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\316\011\016\023\011\031\003\032\022\034" +
    "\007\035\013\036\026\044\021\045\012\047\027\057\033" +
    "\001\001\000\030\011\162\023\011\031\003\032\022\034" +
    "\007\035\013\036\026\044\021\045\012\047\027\057\033" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public Nodo raiz;

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }


    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCJS$actions {



  private final SintacticoCJS parser;

  /** Constructor */
  CUP$SintacticoCJS$actions(SintacticoCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARITMETICA ::= disminucion 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("DISMINUCION");
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARITMETICA ::= aumento 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("AUMENTO");
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARITMETICA ::= identificador L_DIMENSION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo ldim = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(ldim);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARITMETICA ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("IDENTIFICADOR", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARITMETICA ::= LLAMADA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("FUNCION", valleft+1, valright);
        RESULT.hijos.add(val);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARITMETICA ::= falso 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("BOOLEAN", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARITMETICA ::= verdadero 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("BOOLEAN", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARITMETICA ::= valEntero 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ENTERO", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARITMETICA ::= valDecimal 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("DECIMAL", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARITMETICA ::= valCaracter 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("CARACTER", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARITMETICA ::= valCadena 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("CADENA", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARITMETICA ::= ARITMETICA disminucion 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("DISMINUCION", artleft+1, artright);
        RESULT.hijos.add(art);
        RESULT.hijos.add(new Nodo("DISMINUCION", artleft+1, artright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARITMETICA ::= ARITMETICA aumento 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("AUMENTO", artleft+1, artright);
        RESULT.hijos.add(art);
        RESULT.hijos.add(new Nodo("AUMENTO", artleft+1, artright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARITMETICA ::= parL LOGICA parR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("PARENTESIS", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARITMETICA ::= menos ARITMETICA 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("NEGACION", artleft+1, artright);
        RESULT.hijos.add(new Nodo("0", artleft+1, artright));
        RESULT.hijos.add(new Nodo("MENOS", artleft+1, artright));
        RESULT.hijos.add(art);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARITMETICA ::= ARITMETICA potencia ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("POTENCIA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARITMETICA ::= ARITMETICA por ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("POR", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARITMETICA ::= ARITMETICA div ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("DIV", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITMETICA ::= ARITMETICA menos ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RESTA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITMETICA ::= ARITMETICA mas ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("SUMA");
        RESULT.hijos.add(l);
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RELACIONAL ::= ARITMETICA 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", artleft+1, artright);
        RESULT.hijos.add(art);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RELACIONAL ::= not ARITMETICA 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("NOT", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RELACIONAL ::= RELACIONAL menorIgual RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MENORIGUAL", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RELACIONAL ::= RELACIONAL mayorIgual RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MAYORIGUAL", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RELACIONAL ::= RELACIONAL menor RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MENOR", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RELACIONAL ::= RELACIONAL mayor RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MAYOR", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RELACIONAL ::= RELACIONAL distinto RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("DISTINTO", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELACIONAL ::= RELACIONAL igual RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("IGUAL", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOGICA ::= RELACIONAL 
            {
              Nodo RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", relleft+1, relright);
        RESULT.hijos.add(rel);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOGICA ::= LOGICA and LOGICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("AND", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOGICA ::= LOGICA xor LOGICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("XOR", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOGICA ::= LOGICA or LOGICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("OR"));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MIENTRAS ::= mientras parL LOGICA parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
        RESULT = new Nodo("MIENTRAS", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MIENTRAS",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MIENTRAS ::= mientras parL LOGICA parR llaveL S llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("MIENTRAS", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MIENTRAS",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARA ::= para parL identificador dosPuntos LOGICA puntoComa LOGICA puntoComa LOGICA parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).value;
		int log1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Nodo log1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int log3left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int log3right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Nodo log3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
        RESULT = new Nodo("PARA", pleft+1, pright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log1);
        RESULT.hijos.add(log2);
        RESULT.hijos.add(log3);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARA ::= para parL identificador dosPuntos LOGICA puntoComa LOGICA puntoComa LOGICA parR llaveL S llaveR 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).value;
		int log1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		Nodo log1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int log3left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int log3right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("PARA", pleft+1, pright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log1);   
RESULT.hijos.add(log2);
        RESULT.hijos.add(log3);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFECTO ::= defecto dosPuntos S 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String log = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("DEFECTO", logleft+1, logright);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DEFECTO",36, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASO ::= caso LOGICA dosPuntos 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("CASO", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASO ::= caso LOGICA dosPuntos S 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("CASO", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_CASO ::= CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("L_CASO", casoleft+1, casoright);
        RESULT.hijos.add(caso);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_CASO",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_CASO ::= L_CASO CASO 
            {
              Nodo RESULT =null;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = lcaso;
        RESULT.hijos.add(caso);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_CASO",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SELECCIONA ::= seleccion parL ARITMETICA parR llaveL DEFECTO llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo defecto = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SELECCIONA", idleft+1, idright);
        RESULT.hijos.add(id);
        RESULT.hijos.add(defecto);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECCIONA ::= seleccion parL ARITMETICA parR llaveL L_CASO llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SELECCIONA", idleft+1, idright);
        RESULT.hijos.add(id);
        RESULT.hijos.add(lcaso);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SELECCIONA ::= seleccion parL ARITMETICA parR llaveL L_CASO DEFECTO llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo defecto = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SELECCIONA", idleft+1, idright);
        RESULT.hijos.add(id);
        RESULT.hijos.add(lcaso);
        RESULT.hijos.add(defecto);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SINO ::= sino llaveL llaveR 
            {
              Nodo RESULT =null;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("SINO", sinoleft+1, sinoright);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SINO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SINO ::= sino llaveL S llaveR 
            {
              Nodo RESULT =null;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SINO", sinoleft+1, sinoright);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SINO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SI ::= si parL LOGICA parR llaveL llaveR SINO 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(sino);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SI ::= si parL LOGICA parR llaveL S llaveR SINO 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
        RESULT.hijos.add(sino);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SI ::= si parL LOGICA parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SI ::= si parL LOGICA parR llaveL S llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_PARAMETRO_LLAMADA ::= LOGICA 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("L_PARAMETRO_LLAMADA");
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_PARAMETRO_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_PARAMETRO_LLAMADA ::= L_PARAMETRO_LLAMADA coma LOGICA 
            {
              Nodo RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = lpar;
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_PARAMETRO_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMADA ::= funcion identificador parL parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		
        RESULT = new Nodo("LLAMADA");
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMADA ::= funcion identificador parL L_PARAMETRO_LLAMADA parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
        RESULT = new Nodo("LLAMADA", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(lpar);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLAMADA ::= funcion identificador parL parR llaveL S llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int eseleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo ese = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("LLAMADA");
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(ese);    

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAMADA ::= funcion identificador parL L_PARAMETRO_LLAMADA parR llaveL S llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int eseleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo ese = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("LLAMADA", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(lpar);
        RESULT.hijos.add(ese);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPRIMIR ::= imprimir parL LOGICA parR puntoComa 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 
        RESULT = new Nodo("IMPRIMIR", imleft+1, imright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MENSAJE ::= mensaje parL LOGICA parR puntoComa 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 
        RESULT = new Nodo("IMPRIMIR", imleft+1, imright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETORNAR ::= retornar LOGICA puntoComa 
            {
              Nodo RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
         RESULT = new Nodo("RETORNAR", retleft+1, retright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RETORNAR",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Sentencias ::= identificador disminucion puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("DISMINUCION", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Sentencias ::= identificador aumento puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("AUMENTO", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Sentencias ::= identificador parL parR puntoComa 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		 
        RESULT = new Nodo("LLAMADA_FUNCION");
        RESULT.hijos.add(new Nodo(sent.toString(), sentleft+1, sentright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Sentencias ::= terminar puntoComa 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 RESULT = new Nodo("DETENER", sentleft+1, sentright); 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Sentencias ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Sentencias ::= HACER 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencias ::= PARA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencias ::= SELECCIONA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencias ::= SI 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencias ::= VARIABLE 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencias ::= LLAMADA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencias ::= RETORNAR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencias ::= MENSAJE 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencias ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // L_ID ::= identificador coma identificador 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("Lista_ID", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
        RESULT.hijos.add(new Nodo(id2.toString(), id2left+1, id2right));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_ID",16, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // L_ID ::= L_ID coma identificador 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = lid;
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_ID",16, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLE ::= identificador dosPuntos llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLE ::= identificador llaveL LOGICA llaveR dosPuntos llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
        RESULT.hijos.add(log);
RESULT.hijos.add(log2);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE ::= identificador llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLE ::= identificador puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
       
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= identificador dosPuntos LOGICA puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= var identificador dosPuntos llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLE ::= var identificador llaveL LOGICA llaveR dosPuntos llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
        RESULT.hijos.add(log);
RESULT.hijos.add(log2);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLE ::= var identificador llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= var identificador puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
       
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLE ::= var L_ID puntoComa 
            {
              Nodo RESULT =null;
		int hileft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo hi = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE");
        RESULT.hijos.add(hi);
        

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARIABLE ::= var identificador dosPuntos LOGICA puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= Sentencias 
            {
              Nodo RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo ne = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("Ambito",neleft,neright);
cuerpo.hijos.add(ne);
RESULT =cuerpo;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= S Sentencias 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo ne = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		

        op.hijos.add(ne);
        RESULT = op;
       
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIAL ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAL ::= error INICIAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= S 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
            parser.raiz=raiz;
        
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCJS$parser.done_parsing();
          return CUP$SintacticoCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

