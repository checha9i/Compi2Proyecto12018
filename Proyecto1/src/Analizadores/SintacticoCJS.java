
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 03 23:37:17 CST 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 03 23:37:17 CST 2018
  */
public class SintacticoCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCJS() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\003\003" +
    "\000\002\045\007\000\002\045\005\000\002\045\010\000" +
    "\002\045\014\000\002\045\011\000\002\045\006\000\002" +
    "\045\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\004\000\002\011\004\000\002\011\007\000\002" +
    "\011\004\000\002\011\004\000\002\023\007\000\002\032" +
    "\011\000\002\032\010\000\002\032\012\000\002\032\011" +
    "\000\002\033\006\000\002\033\005\000\002\034\012\000" +
    "\002\034\011\000\002\034\011\000\002\037\004\000\002" +
    "\037\003\000\002\040\006\000\002\040\005\000\002\046" +
    "\005\000\002\035\017\000\002\035\016\000\002\036\011" +
    "\000\002\036\010\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\004\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\004\000\002" +
    "\026\005\000\002\026\004\000\002\026\004\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\003\000\002" +
    "\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\032\002\ufffe\003\023\013\032\050\025\054" +
    "\010\055\031\064\030\066\015\071\005\072\011\074\021" +
    "\075\024\001\002\000\004\036\247\001\002\000\004\076" +
    "\232\001\002\000\030\002\000\013\032\050\025\054\010" +
    "\055\031\064\030\066\015\071\005\072\011\074\021\075" +
    "\024\001\002\000\036\002\uffef\013\uffef\050\uffef\054\uffef" +
    "\055\uffef\064\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072" +
    "\uffef\074\uffef\075\uffef\102\uffef\001\002\000\004\076\225" +
    "\001\002\000\004\076\216\001\002\000\036\002\ufff4\013" +
    "\ufff4\050\ufff4\054\ufff4\055\ufff4\064\ufff4\066\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\072\ufff4\074\ufff4\075\ufff4\102\ufff4\001" +
    "\002\000\036\002\ufff1\013\ufff1\050\ufff1\054\ufff1\055\ufff1" +
    "\064\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\074" +
    "\ufff1\075\ufff1\102\ufff1\001\002\000\036\002\uffee\013\uffee" +
    "\050\uffee\054\uffee\055\uffee\064\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\074\uffee\075\uffee\102\uffee\001\002" +
    "\000\004\076\173\001\002\000\030\002\ufffc\013\ufffc\050" +
    "\ufffc\054\ufffc\055\ufffc\064\ufffc\066\ufffc\071\ufffc\072\ufffc" +
    "\074\ufffc\075\ufffc\001\002\000\004\002\172\001\002\000" +
    "\036\002\ufff3\013\ufff3\050\ufff3\054\ufff3\055\ufff3\064\ufff3" +
    "\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\074\ufff3\075" +
    "\ufff3\102\ufff3\001\002\000\004\036\171\001\002\000\036" +
    "\002\ufff0\013\ufff0\050\ufff0\054\ufff0\055\ufff0\064\ufff0\066" +
    "\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\074\ufff0\075\ufff0" +
    "\102\ufff0\001\002\000\032\002\ufffe\003\023\013\032\050" +
    "\025\054\010\055\031\064\030\066\015\071\005\072\011" +
    "\074\021\075\024\001\002\000\004\036\167\001\002\000" +
    "\004\013\145\001\002\000\036\002\uffec\013\uffec\050\uffec" +
    "\054\uffec\055\uffec\064\uffec\066\uffec\067\uffec\070\uffec\071" +
    "\uffec\072\uffec\074\uffec\075\uffec\102\uffec\001\002\000\036" +
    "\002\uffed\013\uffed\050\uffed\054\uffed\055\uffed\064\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\074\uffed\075\uffed" +
    "\102\uffed\001\002\000\004\076\127\001\002\000\004\056" +
    "\123\001\002\000\012\036\036\046\034\047\033\105\035" +
    "\001\002\000\036\002\uffe7\013\uffe7\050\uffe7\054\uffe7\055" +
    "\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7" +
    "\074\uffe7\075\uffe7\102\uffe7\001\002\000\036\002\uffe8\013" +
    "\uffe8\050\uffe8\054\uffe8\055\uffe8\064\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\072\uffe8\074\uffe8\075\uffe8\102\uffe8\001" +
    "\002\000\032\004\041\005\037\006\040\007\052\010\047" +
    "\012\051\013\056\020\050\027\043\046\045\047\044\076" +
    "\055\001\002\000\036\002\ufff5\013\ufff5\050\ufff5\054\ufff5" +
    "\055\ufff5\064\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072" +
    "\ufff5\074\ufff5\075\ufff5\102\ufff5\001\002\000\052\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\046\uffbc\047\uffbc\077\uffbc\102\uffbc\105\uffbc\001" +
    "\002\000\052\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\046\uffbd\047\uffbd\077\uffbd" +
    "\102\uffbd\105\uffbd\001\002\000\052\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\046" +
    "\uffbb\047\uffbb\077\uffbb\102\uffbb\105\uffbb\001\002\000\052" +
    "\017\111\020\112\021\106\022\114\023\113\024\uffc8\025" +
    "\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\046\110\047\107\077\uffc8\102\uffc8\105" +
    "\uffc8\001\002\000\032\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\027\043\046\045\047" +
    "\044\076\055\001\002\000\052\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\046\uffb4" +
    "\047\uffb4\077\uffb4\102\uffb4\105\uffb4\001\002\000\052\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\046\uffb5\047\uffb5\077\uffb5\102\uffb5\105\uffb5" +
    "\001\002\000\052\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\046\uffb8\047\uffb8\077" +
    "\uffb8\102\uffb8\105\uffb8\001\002\000\052\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\046\uffba\047\uffba\077\uffba\102\uffba\105\uffba\001\002\000" +
    "\030\004\041\005\037\006\040\007\052\010\047\012\051" +
    "\013\056\020\050\046\045\047\044\076\055\001\002\000" +
    "\052\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\046\uffb9\047\uffb9\077\uffb9\102\uffb9" +
    "\105\uffb9\001\002\000\052\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\046\uffbe\047" +
    "\uffbe\077\uffbe\102\uffbe\105\uffbe\001\002\000\034\024\uffcf" +
    "\025\uffcf\026\uffcf\030\075\031\074\032\071\033\072\034" +
    "\073\035\076\036\uffcf\077\uffcf\102\uffcf\105\uffcf\001\002" +
    "\000\012\024\064\025\063\026\061\036\070\001\002\000" +
    "\032\004\041\005\037\006\040\007\052\010\047\012\051" +
    "\013\056\020\050\027\043\046\045\047\044\076\055\001" +
    "\002\000\052\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\046\uffb7\047\uffb7\077\uffb7" +
    "\102\uffb7\105\uffb7\001\002\000\052\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\046" +
    "\uffb6\047\uffb6\077\uffb6\102\uffb6\105\uffb6\001\002\000\012" +
    "\024\064\025\063\026\061\077\062\001\002\000\032\004" +
    "\041\005\037\006\040\007\052\010\047\012\051\013\056" +
    "\020\050\027\043\046\045\047\044\076\055\001\002\000" +
    "\052\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\046\uffc1\047\uffc1\077\uffc1\102\uffc1" +
    "\105\uffc1\001\002\000\032\004\041\005\037\006\040\007" +
    "\052\010\047\012\051\013\056\020\050\027\043\046\045" +
    "\047\044\076\055\001\002\000\032\004\041\005\037\006" +
    "\040\007\052\010\047\012\051\013\056\020\050\027\043" +
    "\046\045\047\044\076\055\001\002\000\020\024\uffd3\025" +
    "\063\026\061\036\uffd3\077\uffd3\102\uffd3\105\uffd3\001\002" +
    "\000\020\024\uffd1\025\uffd1\026\uffd1\036\uffd1\077\uffd1\102" +
    "\uffd1\105\uffd1\001\002\000\020\024\uffd2\025\063\026\uffd2" +
    "\036\uffd2\077\uffd2\102\uffd2\105\uffd2\001\002\000\036\002" +
    "\ufff6\013\ufff6\050\ufff6\054\ufff6\055\ufff6\064\ufff6\066\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\074\ufff6\075\ufff6\102" +
    "\ufff6\001\002\000\030\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\046\045\047\044\076" +
    "\055\001\002\000\030\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\046\045\047\044\076" +
    "\055\001\002\000\030\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\046\045\047\044\076" +
    "\055\001\002\000\030\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\046\045\047\044\076" +
    "\055\001\002\000\030\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\046\045\047\044\076" +
    "\055\001\002\000\030\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\046\045\047\044\076" +
    "\055\001\002\000\020\024\uffcd\025\uffcd\026\uffcd\036\uffcd" +
    "\077\uffcd\102\uffcd\105\uffcd\001\002\000\020\024\uffcc\025" +
    "\uffcc\026\uffcc\036\uffcc\077\uffcc\102\uffcc\105\uffcc\001\002" +
    "\000\020\024\uffcb\025\uffcb\026\uffcb\036\uffcb\077\uffcb\102" +
    "\uffcb\105\uffcb\001\002\000\020\024\uffce\025\uffce\026\uffce" +
    "\036\uffce\077\uffce\102\uffce\105\uffce\001\002\000\020\024" +
    "\uffc9\025\uffc9\026\uffc9\036\uffc9\077\uffc9\102\uffc9\105\uffc9" +
    "\001\002\000\020\024\uffca\025\uffca\026\uffca\036\uffca\077" +
    "\uffca\102\uffca\105\uffca\001\002\000\052\017\uffc2\020\uffc2" +
    "\021\106\022\114\023\113\024\uffc2\025\uffc2\026\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\046\110\047\107\077\uffc2\102\uffc2\105\uffc2\001\002\000" +
    "\030\004\041\005\037\006\040\007\052\010\047\012\051" +
    "\013\056\020\050\046\045\047\044\076\055\001\002\000" +
    "\052\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\046\uffbf\047\uffbf\077\uffbf\102\uffbf" +
    "\105\uffbf\001\002\000\052\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\046\uffc0\047" +
    "\uffc0\077\uffc0\102\uffc0\105\uffc0\001\002\000\030\004\041" +
    "\005\037\006\040\007\052\010\047\012\051\013\056\020" +
    "\050\046\045\047\044\076\055\001\002\000\030\004\041" +
    "\005\037\006\040\007\052\010\047\012\051\013\056\020" +
    "\050\046\045\047\044\076\055\001\002\000\030\004\041" +
    "\005\037\006\040\007\052\010\047\012\051\013\056\020" +
    "\050\046\045\047\044\076\055\001\002\000\030\004\041" +
    "\005\037\006\040\007\052\010\047\012\051\013\056\020" +
    "\050\046\045\047\044\076\055\001\002\000\052\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\113\024\uffc5\025\uffc5\026" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\046\110\047\107\077\uffc5\102\uffc5\105\uffc5\001" +
    "\002\000\052\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\113" +
    "\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\046\110\047\107\077\uffc3" +
    "\102\uffc3\105\uffc3\001\002\000\052\017\uffc6\020\uffc6\021" +
    "\106\022\114\023\113\024\uffc6\025\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\046" +
    "\110\047\107\077\uffc6\102\uffc6\105\uffc6\001\002\000\052" +
    "\017\uffc7\020\uffc7\021\106\022\114\023\113\024\uffc7\025" +
    "\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\046\110\047\107\077\uffc7\102\uffc7\105" +
    "\uffc7\001\002\000\052\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\113\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\046\110\047\107" +
    "\077\uffc4\102\uffc4\105\uffc4\001\002\000\020\024\uffd0\025" +
    "\uffd0\026\uffd0\036\uffd0\077\uffd0\102\uffd0\105\uffd0\001\002" +
    "\000\004\076\124\001\002\000\004\077\125\001\002\000" +
    "\004\036\126\001\002\000\036\002\uffe9\013\uffe9\050\uffe9" +
    "\054\uffe9\055\uffe9\064\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\072\uffe9\074\uffe9\075\uffe9\102\uffe9\001\002\000\032" +
    "\004\041\005\037\006\040\007\052\010\047\012\051\013" +
    "\056\020\050\027\043\046\045\047\044\076\055\001\002" +
    "\000\012\024\064\025\063\026\061\077\131\001\002\000" +
    "\004\103\132\001\002\000\030\013\032\050\025\054\010" +
    "\055\031\064\030\066\015\071\005\072\011\074\021\075" +
    "\024\102\133\001\002\000\040\002\uffe4\013\uffe4\050\uffe4" +
    "\054\uffe4\055\uffe4\064\uffe4\065\136\066\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\072\uffe4\074\uffe4\075\uffe4\102\uffe4\001\002" +
    "\000\004\102\135\001\002\000\040\002\uffe5\013\uffe5\050" +
    "\uffe5\054\uffe5\055\uffe5\064\uffe5\065\136\066\uffe5\067\uffe5" +
    "\070\uffe5\071\uffe5\072\uffe5\074\uffe5\075\uffe5\102\uffe5\001" +
    "\002\000\004\103\140\001\002\000\036\002\uffe3\013\uffe3" +
    "\050\uffe3\054\uffe3\055\uffe3\064\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\074\uffe3\075\uffe3\102\uffe3\001\002" +
    "\000\030\013\032\050\025\054\010\055\031\064\030\066" +
    "\015\071\005\072\011\074\021\075\024\102\141\001\002" +
    "\000\036\002\uffe0\013\uffe0\050\uffe0\054\uffe0\055\uffe0\064" +
    "\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\074\uffe0" +
    "\075\uffe0\102\uffe0\001\002\000\004\102\143\001\002\000" +
    "\036\002\uffe1\013\uffe1\050\uffe1\054\uffe1\055\uffe1\064\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\074\uffe1\075" +
    "\uffe1\102\uffe1\001\002\000\036\002\uffe2\013\uffe2\050\uffe2" +
    "\054\uffe2\055\uffe2\064\uffe2\066\uffe2\067\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\074\uffe2\075\uffe2\102\uffe2\001\002\000\010" +
    "\036\150\103\146\105\147\001\002\000\032\004\041\005" +
    "\037\006\040\007\052\010\047\012\051\013\056\020\050" +
    "\027\043\046\045\047\044\076\055\001\002\000\034\004" +
    "\041\005\037\006\040\007\052\010\047\012\051\013\056" +
    "\020\050\027\043\046\045\047\044\076\055\103\151\001" +
    "\002\000\036\002\ufffa\013\ufffa\050\ufffa\054\ufffa\055\ufffa" +
    "\064\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\074" +
    "\ufffa\075\ufffa\102\ufffa\001\002\000\032\004\041\005\037" +
    "\006\040\007\052\010\047\012\051\013\056\020\050\027" +
    "\043\046\045\047\044\076\055\001\002\000\012\024\064" +
    "\025\063\026\061\036\153\001\002\000\036\002\ufffb\013" +
    "\ufffb\050\ufffb\054\ufffb\055\ufffb\064\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\074\ufffb\075\ufffb\102\ufffb\001" +
    "\002\000\012\024\064\025\063\026\061\102\155\001\002" +
    "\000\004\036\156\001\002\000\036\002\ufff7\013\ufff7\050" +
    "\ufff7\054\ufff7\055\ufff7\064\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\074\ufff7\075\ufff7\102\ufff7\001\002\000" +
    "\012\024\064\025\063\026\061\102\160\001\002\000\006" +
    "\036\162\105\161\001\002\000\004\103\163\001\002\000" +
    "\036\002\ufff9\013\ufff9\050\ufff9\054\ufff9\055\ufff9\064\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\074\ufff9\075" +
    "\ufff9\102\ufff9\001\002\000\032\004\041\005\037\006\040" +
    "\007\052\010\047\012\051\013\056\020\050\027\043\046" +
    "\045\047\044\076\055\001\002\000\012\024\064\025\063" +
    "\026\061\102\165\001\002\000\004\036\166\001\002\000" +
    "\036\002\ufff8\013\ufff8\050\ufff8\054\ufff8\055\ufff8\064\ufff8" +
    "\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\074\ufff8\075" +
    "\ufff8\102\ufff8\001\002\000\036\002\uffea\013\uffea\050\uffea" +
    "\054\uffea\055\uffea\064\uffea\066\uffea\067\uffea\070\uffea\071" +
    "\uffea\072\uffea\074\uffea\075\uffea\102\uffea\001\002\000\004" +
    "\002\uffff\001\002\000\036\002\uffeb\013\uffeb\050\uffeb\054" +
    "\uffeb\055\uffeb\064\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\074\uffeb\075\uffeb\102\uffeb\001\002\000\004\002" +
    "\001\001\002\000\030\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\046\045\047\044\076" +
    "\055\001\002\000\022\017\111\020\112\021\106\022\114" +
    "\023\113\046\110\047\107\077\175\001\002\000\004\103" +
    "\176\001\002\000\006\067\201\070\202\001\002\000\010" +
    "\067\201\070\202\102\213\001\002\000\004\102\211\001" +
    "\002\000\032\004\041\005\037\006\040\007\052\010\047" +
    "\012\051\013\056\020\050\027\043\046\045\047\044\076" +
    "\055\001\002\000\004\105\204\001\002\000\010\067\uffdb" +
    "\070\uffdb\102\uffdb\001\002\000\026\013\032\050\025\054" +
    "\010\055\031\064\030\066\015\071\005\072\011\074\021" +
    "\075\024\001\002\000\004\102\uffd8\001\002\000\012\024" +
    "\064\025\063\026\061\105\207\001\002\000\034\013\032" +
    "\050\025\054\010\055\031\064\030\066\015\067\uffd9\070" +
    "\uffd9\071\005\072\011\074\021\075\024\102\uffd9\001\002" +
    "\000\010\067\uffda\070\uffda\102\uffda\001\002\000\036\002" +
    "\uffdd\013\uffdd\050\uffdd\054\uffdd\055\uffdd\064\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\072\uffdd\074\uffdd\075\uffdd\102" +
    "\uffdd\001\002\000\004\102\215\001\002\000\036\002\uffde" +
    "\013\uffde\050\uffde\054\uffde\055\uffde\064\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\074\uffde\075\uffde\102\uffde" +
    "\001\002\000\010\067\uffdc\070\uffdc\102\uffdc\001\002\000" +
    "\036\002\uffdf\013\uffdf\050\uffdf\054\uffdf\055\uffdf\064\uffdf" +
    "\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\074\uffdf\075" +
    "\uffdf\102\uffdf\001\002\000\032\004\041\005\037\006\040" +
    "\007\052\010\047\012\051\013\056\020\050\027\043\046" +
    "\045\047\044\076\055\001\002\000\012\024\064\025\063" +
    "\026\061\077\220\001\002\000\004\103\221\001\002\000" +
    "\030\013\032\050\025\054\010\055\031\064\030\066\015" +
    "\071\005\072\011\074\021\075\024\102\222\001\002\000" +
    "\036\002\uffd4\013\uffd4\050\uffd4\054\uffd4\055\uffd4\064\uffd4" +
    "\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\074\uffd4\075" +
    "\uffd4\102\uffd4\001\002\000\004\102\224\001\002\000\036" +
    "\002\uffd5\013\uffd5\050\uffd5\054\uffd5\055\uffd5\064\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\074\uffd5\075\uffd5" +
    "\102\uffd5\001\002\000\032\004\041\005\037\006\040\007" +
    "\052\010\047\012\051\013\056\020\050\027\043\046\045" +
    "\047\044\076\055\001\002\000\012\024\064\025\063\026" +
    "\061\077\227\001\002\000\004\036\230\001\002\000\036" +
    "\002\uffe6\013\uffe6\050\uffe6\054\uffe6\055\uffe6\064\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\074\uffe6\075\uffe6" +
    "\102\uffe6\001\002\000\030\002\ufffd\013\ufffd\050\ufffd\054" +
    "\ufffd\055\ufffd\064\ufffd\066\ufffd\071\ufffd\072\ufffd\074\ufffd" +
    "\075\ufffd\001\002\000\004\013\233\001\002\000\004\105" +
    "\234\001\002\000\032\004\041\005\037\006\040\007\052" +
    "\010\047\012\051\013\056\020\050\027\043\046\045\047" +
    "\044\076\055\001\002\000\012\024\064\025\063\026\061" +
    "\036\236\001\002\000\032\004\041\005\037\006\040\007" +
    "\052\010\047\012\051\013\056\020\050\027\043\046\045" +
    "\047\044\076\055\001\002\000\012\024\064\025\063\026" +
    "\061\036\240\001\002\000\032\004\041\005\037\006\040" +
    "\007\052\010\047\012\051\013\056\020\050\027\043\046" +
    "\045\047\044\076\055\001\002\000\012\024\064\025\063" +
    "\026\061\077\242\001\002\000\004\103\243\001\002\000" +
    "\030\013\032\050\025\054\010\055\031\064\030\066\015" +
    "\071\005\072\011\074\021\075\024\102\244\001\002\000" +
    "\036\002\uffd6\013\uffd6\050\uffd6\054\uffd6\055\uffd6\064\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\074\uffd6\075" +
    "\uffd6\102\uffd6\001\002\000\004\102\246\001\002\000\036" +
    "\002\uffd7\013\uffd7\050\uffd7\054\uffd7\055\uffd7\064\uffd7\066" +
    "\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\074\uffd7\075\uffd7" +
    "\102\uffd7\001\002\000\036\002\ufff2\013\ufff2\050\ufff2\054" +
    "\ufff2\055\ufff2\064\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\074\ufff2\075\ufff2\102\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\032\002\016\003\005\011\015\023\011\031" +
    "\003\032\021\034\006\035\013\036\025\044\017\045\012" +
    "\047\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\230\023\011\031\003\032\021\034\006\035\013" +
    "\036\025\044\017\045\012\047\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\167\003\005\011" +
    "\015\023\011\031\003\032\021\034\006\035\013\036\025" +
    "\044\017\045\012\047\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\053\025\052\026\041" +
    "\031\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\121\025\052\026\041\031\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\104\031\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\057\025\052\026\041\031\045\001\001\000\004\027" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\066\025\052\026\041\031\045\001\001\000\002\001" +
    "\001\000\012\024\065\025\052\026\041\031\045\001\001" +
    "\000\012\024\064\025\052\026\041\031\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\103\026\041\031\045\001\001\000" +
    "\010\025\102\026\041\031\045\001\001\000\010\025\101" +
    "\026\041\031\045\001\001\000\010\025\100\026\041\031" +
    "\045\001\001\000\010\025\077\026\041\031\045\001\001" +
    "\000\010\025\076\026\041\031\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\120\031\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\117\031\045\001\001\000\006\026" +
    "\116\031\045\001\001\000\006\026\115\031\045\001\001" +
    "\000\006\026\114\031\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\127" +
    "\025\052\026\041\031\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\133\023\011\031\003\032\021" +
    "\034\006\035\013\036\025\044\017\045\012\047\026\001" +
    "\001\000\004\033\143\001\001\000\002\001\001\000\004" +
    "\033\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\141\023\011\031\003\032\021\034\006\035\013" +
    "\036\025\044\017\045\012\047\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\156\025\052\026\041\031" +
    "\045\001\001\000\012\024\151\025\052\026\041\031\045" +
    "\001\001\000\002\001\001\000\012\024\153\025\052\026" +
    "\041\031\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\163\025\052\026\041\031\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\173\031\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\037\176\040\202\046" +
    "\177\001\001\000\006\040\213\046\211\001\001\000\002" +
    "\001\001\000\012\024\205\025\052\026\041\031\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\204" +
    "\023\011\031\003\032\021\034\006\035\013\036\025\044" +
    "\017\045\012\047\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\207\023\011\031\003\032\021\034" +
    "\006\035\013\036\025\044\017\045\012\047\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\216\025\052\026\041\031\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\222\023\011\031\003" +
    "\032\021\034\006\035\013\036\025\044\017\045\012\047" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\225\025\052\026\041\031\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\234\025\052\026\041\031\045\001\001\000\002" +
    "\001\001\000\012\024\236\025\052\026\041\031\045\001" +
    "\001\000\002\001\001\000\012\024\240\025\052\026\041" +
    "\031\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\244\023\011\031\003\032\021\034\006\035\013" +
    "\036\025\044\017\045\012\047\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public Nodo raiz;

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }


    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCJS$actions {



  private final SintacticoCJS parser;

  /** Constructor */
  CUP$SintacticoCJS$actions(SintacticoCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARITMETICA ::= disminucion 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("ARITMETICA");
        RESULT.hijos.add(new Nodo("DISMINUCION"));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARITMETICA ::= aumento 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("ARITMETICA");
        RESULT.hijos.add(new Nodo("AUMENTO"));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARITMETICA ::= identificador L_DIMENSION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo ldim = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(ldim);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARITMETICA ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITMETICA ::= LLAMADA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", valleft+1, valright);
        RESULT.hijos.add(val);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITMETICA ::= falso 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITMETICA ::= verdadero 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITMETICA ::= valEntero 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARITMETICA ::= valDecimal 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARITMETICA ::= valCaracter 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARITMETICA ::= valCadena 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", valleft+1, valright);
        RESULT.hijos.add(new Nodo(val.toString(), valleft+1, valright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARITMETICA ::= ARITMETICA disminucion 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("ARITMETICA", artleft+1, artright);
        RESULT.hijos.add(art);
        RESULT.hijos.add(new Nodo("DISMINUCION", artleft+1, artright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARITMETICA ::= ARITMETICA aumento 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("ARITMETICA", artleft+1, artright);
        RESULT.hijos.add(art);
        RESULT.hijos.add(new Nodo("AUMENTO", artleft+1, artright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARITMETICA ::= parL LOGICA parR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("ARITMETICA", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARITMETICA ::= menos ARITMETICA 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", artleft+1, artright);
        RESULT.hijos.add(new Nodo("0", artleft+1, artright));
        RESULT.hijos.add(new Nodo("MENOS", artleft+1, artright));
        RESULT.hijos.add(art);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARITMETICA ::= ARITMETICA potencia ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("POTENCIA", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARITMETICA ::= ARITMETICA por ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("POR", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARITMETICA ::= ARITMETICA div ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("DIV", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARITMETICA ::= ARITMETICA menos ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MENOS", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARITMETICA ::= ARITMETICA mas ARITMETICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("ARITMETICA");
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MAS", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RELACIONAL ::= ARITMETICA 
            {
              Nodo RESULT =null;
		int artleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int artright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo art = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", artleft+1, artright);
        RESULT.hijos.add(art);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RELACIONAL ::= RELACIONAL menorIgual RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MENORIGUAL", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RELACIONAL ::= RELACIONAL mayorIgual RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MAYORIGUAL", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RELACIONAL ::= RELACIONAL menor RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MENOR", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RELACIONAL ::= RELACIONAL mayor RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("MAYOR", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RELACIONAL ::= RELACIONAL distinto RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("DISTINTO", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RELACIONAL ::= RELACIONAL igual RELACIONAL 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("RELACIONAL", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("IGUAL", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOGICA ::= RELACIONAL 
            {
              Nodo RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", relleft+1, relright);
        RESULT.hijos.add(rel);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LOGICA ::= not LOGICA 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", logleft+1, logright);
        RESULT.hijos.add(new Nodo("NOT", logleft+1, logright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LOGICA ::= LOGICA and LOGICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("AND", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LOGICA ::= LOGICA xor LOGICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("XOR", lleft+1, lright));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LOGICA ::= LOGICA or LOGICA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("LOGICA", lleft+1, lright);
        RESULT.hijos.add(l);
        RESULT.hijos.add(new Nodo("OR"));
        RESULT.hijos.add(r);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LOGICA",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MIENTRAS ::= mientras parL LOGICA parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
        RESULT = new Nodo("MIENTRAS", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MIENTRAS",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MIENTRAS ::= mientras parL LOGICA parR llaveL Sentencias llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("MIENTRAS", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MIENTRAS",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARA ::= para parL identificador dosPuntos LOGICA puntoComa LOGICA puntoComa LOGICA parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)).value;
		int log1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Nodo log1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int log3left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int log3right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Nodo log3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
        RESULT = new Nodo("PARA", pleft+1, pright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log1);
        RESULT.hijos.add(log2);
        RESULT.hijos.add(log3);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARA ::= para parL identificador dosPuntos LOGICA puntoComa LOGICA puntoComa LOGICA parR llaveL Sentencias llaveR 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).value;
		int log1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		Nodo log1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int log3left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int log3right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("PARA", pleft+1, pright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log1);   
RESULT.hijos.add(log2);
        RESULT.hijos.add(log3);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("PARA",27, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFECTO ::= defecto dosPuntos Sentencias 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String log = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("DEFECTO", logleft+1, logright);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DEFECTO",36, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASO ::= caso LOGICA dosPuntos 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("CASO", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASO ::= caso LOGICA dosPuntos Sentencias 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("CASO", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",30, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_CASO ::= CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("L_CASO", casoleft+1, casoright);
        RESULT.hijos.add(caso);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_CASO",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_CASO ::= L_CASO CASO 
            {
              Nodo RESULT =null;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = lcaso;
        RESULT.hijos.add(caso);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("L_CASO",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SELECCIONA ::= seleccion parL ARITMETICA parR llaveL DEFECTO llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo defecto = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SELECCIONA", idleft+1, idright);
        RESULT.hijos.add(id);
        RESULT.hijos.add(defecto);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SELECCIONA ::= seleccion parL ARITMETICA parR llaveL L_CASO llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SELECCIONA", idleft+1, idright);
        RESULT.hijos.add(id);
        RESULT.hijos.add(lcaso);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SELECCIONA ::= seleccion parL ARITMETICA parR llaveL L_CASO DEFECTO llaveR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo defecto = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SELECCIONA", idleft+1, idright);
        RESULT.hijos.add(id);
        RESULT.hijos.add(lcaso);
        RESULT.hijos.add(defecto);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECCIONA",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SINO ::= sino llaveL llaveR 
            {
              Nodo RESULT =null;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("SINO", sinoleft+1, sinoright);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SINO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SINO ::= sino llaveL Sentencias llaveR 
            {
              Nodo RESULT =null;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SINO", sinoleft+1, sinoright);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SINO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SI ::= si parL LOGICA parR llaveL llaveR SINO 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(sino);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SI ::= si parL LOGICA parR llaveL Sentencias llaveR SINO 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
        RESULT.hijos.add(sino);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SI ::= si parL LOGICA parR llaveL llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SI ::= si parL LOGICA parR llaveL Sentencias llaveR 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo lsent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("SI", logleft+1, logright);
        RESULT.hijos.add(log);
        RESULT.hijos.add(lsent);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SI",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMPRIMIR ::= imprimir parL LOGICA parR puntoComa 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		 
        RESULT = new Nodo("IMPRIMIR", imleft+1, imright);
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencias ::= identificador disminucion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("DISMINUCION", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencias ::= identificador aumento 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("AUMENTO", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencias ::= funcion datos parL parR puntoComa 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		 RESULT = new Nodo("LLAMADA_DATO", sentleft+1, sentright); 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencias ::= terminar puntoComa 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 RESULT = new Nodo("TERMINAR", sentleft+1, sentright); 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencias ::= continuar puntoComa 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 RESULT = new Nodo("CONTINUAR", sentleft+1, sentright); 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencias ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencias ::= HACER 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencias ::= PARA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencias ::= SELECCIONA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencias ::= SI 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencias ::= VARIABLE 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencias ::= LLAMADA puntoComa 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencias ::= RETORNAR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencias ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		 RESULT = sent; 
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Sentencias",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= identificador puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
       
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= identificador dosPuntos LOGICA puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLE ::= var identificador dosPuntos llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLE ::= var identificador llaveL LOGICA llaveR dosPuntos llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
        RESULT.hijos.add(log);
RESULT.hijos.add(log2);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= var identificador llaveL LOGICA llaveR puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLE ::= var identificador puntoComa 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", id1left+1, id1right);
        RESULT.hijos.add(new Nodo(id1.toString(), id1left+1, id1right));
       
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARIABLE ::= var identificador dosPuntos LOGICA puntoComa 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
        RESULT = new Nodo("VARIABLE", idleft+1, idright);
        RESULT.hijos.add(new Nodo(id.toString(), idleft+1, idright));
        RESULT.hijos.add(log);
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("VARIABLE",35, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= Sentencias 
            {
              Nodo RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo ne = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
Nodo cuerpo = new Nodo("CJS",neleft,neright);
cuerpo.hijos.add(ne);
RESULT =cuerpo;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= S Sentencias 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo ne = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		

        op.hijos.add(ne);
        RESULT = op;
       
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIAL ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAL ::= error INICIAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= S 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
            parser.raiz=raiz;
        
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCJS$parser.done_parsing();
          return CUP$SintacticoCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

