/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*----------------------------------------------------------------------------
----------------------------------------- Area de Codigo de Usuario
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
package Analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/Analizadores/lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\55\1\60\1\56\1\53\22\0\1\57\1\0\1\5"+
    "\4\0\1\0\1\7\1\10\1\14\1\12\1\0\1\13\1\2\1\15"+
    "\1\1\1\1\10\1\1\0\1\11\1\17\1\6\1\16\2\0\1\32"+
    "\1\33\1\20\1\35\1\31\1\25\1\46\1\21\1\27\1\44\1\50"+
    "\1\24\1\23\1\30\1\36\1\41\1\52\1\40\1\43\1\22\1\37"+
    "\1\51\1\3\1\45\1\3\1\34\4\0\1\4\1\0\1\32\1\33"+
    "\1\20\1\35\1\31\1\25\1\46\1\21\1\27\1\44\1\50\1\24"+
    "\1\23\1\30\1\36\1\41\1\52\1\40\1\43\1\22\1\37\1\51"+
    "\1\3\1\45\1\3\1\34\1\0\1\54\10\0\1\60\113\0\1\3"+
    "\37\0\1\3\76\0\2\26\115\0\1\42\u1ea8\0\1\60\1\60\u0100\0"+
    "\1\47\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\3\3"+
    "\1\1\10\3\1\1\3\3\2\16\1\17\1\16\2\0"+
    "\1\20\1\21\1\0\2\3\1\22\3\3\1\23\2\3"+
    "\1\0\3\3\1\0\1\3\2\0\1\24\2\3\1\24"+
    "\10\3\2\0\4\3\1\0\1\2\1\25\1\0\2\3"+
    "\1\0\4\3\2\26\1\0\3\3\2\0\2\3\2\0"+
    "\5\3\1\0\7\3\2\0\4\3\1\0\2\27\1\3"+
    "\1\0\2\3\1\30\1\3\1\0\3\3\2\0\1\3"+
    "\2\0\4\3\1\31\1\0\4\3\1\0\1\3\1\32"+
    "\1\3\2\0\4\3\1\0\1\33\2\34\3\3\1\0"+
    "\1\3\1\35\1\36\1\37\11\0\1\37\2\0\4\3"+
    "\1\0\1\3\1\40\1\41\1\3\1\0\1\3\1\42"+
    "\2\0\2\3\1\43\1\44\1\0\2\3\1\45\2\46"+
    "\1\3\2\0\1\47\1\0\1\50\14\0\1\51\1\0"+
    "\1\51\2\3\1\52\1\0\2\3\2\53\2\0\3\3"+
    "\1\54\4\0\1\55\14\0\2\3\1\0\1\3\1\56"+
    "\1\0\2\57\1\60\1\3\1\61\1\0\1\62\15\0"+
    "\2\3\2\63\1\0\1\3\1\64\3\0\1\65\1\66"+
    "\1\67\3\0\1\70\1\0\1\71\1\0\2\72\1\3"+
    "\1\73\1\74\1\0\1\75\1\76\1\0\1\77\1\0"+
    "\1\100\1\101\1\0\1\102\1\0\1\103\1\0\1\104"+
    "\4\0\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\223"+
    "\0\223\0\223\0\223\0\223\0\223\0\223\0\u0157\0\223"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\223\0\223\0\u04fa\0\u052b\0\u0126\0\223"+
    "\0\223\0\u055c\0\u058d\0\u05be\0\365\0\u05ef\0\u0620\0\u0651"+
    "\0\365\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\223\0\u086c\0\u089d\0\365\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u052b\0\223"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\223\0\365\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\223\0\365\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\365\0\u1696\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\365\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\365\0\223"+
    "\0\365\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\365"+
    "\0\223\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\365\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\365\0\365\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\365\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\365\0\365\0\u1f33"+
    "\0\u1f64\0\u1f95\0\365\0\223\0\365\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\223\0\u2059\0\223\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\223"+
    "\0\u22d6\0\365\0\u2307\0\u2338\0\365\0\u2369\0\u239a\0\u23cb"+
    "\0\223\0\365\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\365"+
    "\0\u24f1\0\u2522\0\u2553\0\u2584\0\223\0\u25b5\0\u25e6\0\u2617"+
    "\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f"+
    "\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\365\0\u28c5\0\223"+
    "\0\365\0\365\0\u28f6\0\223\0\u2927\0\u2958\0\u2989\0\u29ba"+
    "\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42"+
    "\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\223\0\365\0\u2c68"+
    "\0\u2c99\0\223\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\223\0\223"+
    "\0\u2d8e\0\u2dbf\0\u2df0\0\223\0\u2e21\0\223\0\u2e52\0\223"+
    "\0\365\0\u2e83\0\223\0\365\0\u2eb4\0\223\0\223\0\u2ee5"+
    "\0\223\0\u2f16\0\223\0\223\0\u2f47\0\365\0\u2f78\0\223"+
    "\0\u2fa9\0\223\0\u2fda\0\u300b\0\u303c\0\u306d\0\223\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\4\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\6\1\23\2\6\1\24\1\25\1\26\1\6"+
    "\1\27\1\30\1\31\1\6\1\32\1\33\1\6\1\34"+
    "\1\35\1\36\1\37\2\6\1\40\1\4\1\6\1\41"+
    "\1\6\1\42\1\4\3\43\1\0\15\43\2\44\36\43"+
    "\1\0\17\43\1\45\36\43\1\0\1\43\2\0\1\43"+
    "\63\0\1\5\1\46\57\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\13\6\1\0\4\6\1\0\3\6\6\0"+
    "\5\47\1\50\53\47\14\0\1\51\61\0\1\52\44\0"+
    "\1\6\1\0\2\6\13\0\1\53\1\54\1\55\1\6"+
    "\1\56\1\6\1\0\2\6\1\57\1\60\1\61\3\6"+
    "\1\62\2\6\1\0\1\6\1\63\2\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\64\1\65"+
    "\1\6\1\66\1\67\7\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\70\1\71"+
    "\12\6\1\0\4\6\1\0\3\6\31\0\1\72\10\0"+
    "\1\73\1\74\24\0\1\6\1\0\2\6\13\0\3\6"+
    "\1\75\2\6\1\0\5\6\1\76\1\77\4\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\1\6\1\100\11\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\4\6\1\101"+
    "\1\6\1\0\1\6\1\102\11\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\7\6\1\103\3\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\2\6\1\104"+
    "\10\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\12\6\1\105\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\10\6\1\106\2\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\0\3\6"+
    "\1\107\7\6\1\0\4\6\1\0\3\6\40\0\1\110"+
    "\6\0\1\111\20\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\3\6\1\112\6\6\1\113\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\11\6\1\114\1\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\3\6\1\115"+
    "\7\6\1\0\4\6\1\0\3\6\62\0\1\116\21\0"+
    "\1\44\44\0\1\117\74\0\1\120\44\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\13\6\1\121\1\122\3\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\2\6"+
    "\1\123\3\6\1\0\13\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\124\1\125"+
    "\12\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\1\6\1\126\11\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\13\6\1\0\1\6\1\127\2\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\2\6\1\130\10\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\13\6\1\131"+
    "\1\132\3\6\1\0\3\6\30\0\1\133\37\0\1\6"+
    "\1\0\2\6\13\0\2\6\1\134\3\6\1\0\13\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\2\6"+
    "\13\0\6\6\1\0\13\6\1\0\2\6\1\135\1\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\4\6\1\136\6\6\1\0\4\6\1\0\3\6"+
    "\32\0\1\137\3\0\1\140\31\0\1\6\1\0\2\6"+
    "\13\0\4\6\1\141\1\6\1\0\1\6\1\142\11\6"+
    "\1\0\4\6\1\0\3\6\40\0\1\143\100\0\1\144"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\0\3\6"+
    "\1\145\7\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\6\6\1\0\13\6\1\0\4\6"+
    "\1\0\2\6\1\146\7\0\1\6\1\0\2\6\13\0"+
    "\1\147\3\6\1\150\1\6\1\0\13\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\2\6"+
    "\1\151\3\6\1\152\1\153\12\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\1\154\5\6"+
    "\1\0\13\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\2\6\1\155\3\6\1\0\13\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\2\6"+
    "\13\0\6\6\1\0\11\6\1\156\1\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\1\157"+
    "\5\6\1\0\13\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\2\6\1\160\3\6\1\0"+
    "\13\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\1\6\1\161\11\6\1\0"+
    "\4\6\1\0\3\6\32\0\1\162\62\0\2\163\32\0"+
    "\1\6\1\0\2\6\13\0\4\6\1\164\1\6\1\0"+
    "\13\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\163\1\165\12\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\10\6\1\166\2\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\4\6\1\167\1\6"+
    "\1\0\13\6\1\0\4\6\1\0\3\6\63\0\1\170"+
    "\45\0\2\171\16\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\13\6\1\171\1\172\3\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\3\6\1\173\2\6\1\0"+
    "\13\6\1\0\4\6\1\0\3\6\26\0\1\174\41\0"+
    "\1\6\1\0\2\6\13\0\1\175\5\6\1\0\13\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\2\6"+
    "\13\0\2\6\1\176\3\6\1\0\13\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\3\6\1\177\7\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\0\11\6"+
    "\1\200\1\6\1\0\4\6\1\0\3\6\45\0\1\201"+
    "\22\0\1\6\1\0\2\6\13\0\6\6\1\0\10\6"+
    "\1\202\2\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\2\6\1\203\3\6\1\0\13\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\2\6"+
    "\13\0\4\6\1\204\1\6\1\0\13\6\1\0\4\6"+
    "\1\0\3\6\12\0\1\205\67\0\1\206\46\0\1\6"+
    "\1\0\1\6\1\207\13\0\6\6\1\0\13\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\6\0"+
    "\1\206\4\0\6\6\1\0\13\6\1\0\4\6\1\0"+
    "\3\6\54\0\1\210\51\0\1\211\22\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\13\6\1\0\3\6\1\212"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\10\6\1\213\2\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\0\3\6"+
    "\1\214\7\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\6\6\1\0\3\6\1\215\7\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\2\6"+
    "\13\0\6\6\1\0\7\6\1\216\3\6\1\0\4\6"+
    "\1\0\3\6\36\0\1\217\31\0\1\6\1\0\2\6"+
    "\13\0\6\6\1\0\1\6\1\220\11\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\1\6"+
    "\1\221\4\6\1\0\13\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\6\6\1\0\7\6"+
    "\1\222\3\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\6\6\1\0\2\6\1\223\10\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\2\6"+
    "\13\0\6\6\1\224\1\225\12\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\3\6\1\226\7\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\2\6\1\227"+
    "\10\6\1\0\4\6\1\0\3\6\30\0\1\230\66\0"+
    "\1\231\31\0\1\6\1\0\2\6\13\0\2\6\1\232"+
    "\3\6\1\0\13\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\1\6\1\233"+
    "\11\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\12\6\1\234\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\7\6\1\235\3\6\1\0\4\6\1\0\3\6"+
    "\62\0\1\236\5\0\1\6\1\0\2\6\13\0\4\6"+
    "\1\237\1\6\1\0\13\6\1\0\4\6\1\0\3\6"+
    "\55\0\2\240\11\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\13\6\1\0\4\6\1\240\1\241\2\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\11\6\1\242"+
    "\1\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\1\6\1\243\13\0\6\6\1\0\13\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\12\6\1\244\1\0\4\6\1\0\3\6\32\0"+
    "\1\245\35\0\1\6\1\0\2\6\13\0\4\6\1\246"+
    "\1\6\1\0\13\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\7\6\1\247"+
    "\3\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\3\6\1\250\7\6\1\0"+
    "\4\6\1\0\3\6\30\0\1\251\56\0\1\252\1\0"+
    "\1\253\2\0\1\254\2\255\1\0\1\256\1\0\1\257"+
    "\2\0\1\260\2\0\1\261\2\262\16\0\1\6\1\0"+
    "\2\6\13\0\2\6\1\263\3\6\1\0\13\6\1\0"+
    "\4\6\1\0\3\6\37\0\1\264\55\0\2\265\32\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\2\6\1\266"+
    "\10\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\265\1\267\12\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\4\6\1\270\6\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\1\271\5\6\1\0"+
    "\13\6\1\0\4\6\1\0\3\6\37\0\1\272\30\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\2\6\1\273"+
    "\10\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\7\6\1\274\3\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\1\6\1\275\11\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\1\276\5\6"+
    "\1\0\13\6\1\0\4\6\1\0\3\6\44\0\1\277"+
    "\23\0\1\6\1\0\2\6\13\0\6\6\1\0\7\6"+
    "\1\300\3\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\4\6\1\301\1\6\1\0\13\6"+
    "\1\0\4\6\1\0\3\6\44\0\1\302\52\0\1\303"+
    "\31\0\1\6\1\0\2\6\13\0\6\6\1\0\7\6"+
    "\1\304\3\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\6\6\1\0\1\6\1\305\11\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\2\6"+
    "\13\0\6\6\1\0\7\6\1\306\3\6\1\0\4\6"+
    "\1\0\3\6\7\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\11\6\1\307\1\6\1\0\4\6\1\0\3\6"+
    "\61\0\1\310\6\0\1\6\1\0\2\6\13\0\6\6"+
    "\1\0\3\6\1\311\7\6\1\0\4\6\1\0\3\6"+
    "\7\0\1\6\1\0\2\6\13\0\2\6\1\312\3\6"+
    "\1\0\13\6\1\0\4\6\1\0\3\6\7\0\1\6"+
    "\1\0\2\6\13\0\6\6\1\0\7\6\1\313\3\6"+
    "\1\0\4\6\1\0\3\6\44\0\1\314\23\0\1\6"+
    "\1\0\2\6\13\0\6\6\1\0\7\6\1\315\3\6"+
    "\1\0\4\6\1\0\3\6\7\0\1\6\1\0\1\6"+
    "\1\316\13\0\6\6\1\0\13\6\1\0\4\6\1\0"+
    "\3\6\26\0\1\317\1\320\1\321\7\0\1\322\1\323"+
    "\3\0\1\324\4\0\1\325\42\0\2\326\1\0\1\327"+
    "\1\330\54\0\2\331\54\0\1\332\65\0\1\333\66\0"+
    "\1\334\63\0\1\335\51\0\1\336\67\0\1\337\47\0"+
    "\1\340\61\0\1\341\30\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\1\6\1\342\11\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\2\6\1\343\10\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\2\6\1\344"+
    "\10\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\2\6\1\345\10\6\1\0"+
    "\4\6\1\0\3\6\40\0\1\346\27\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\3\6\1\347\7\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\13\0"+
    "\1\6\1\350\4\6\1\0\13\6\1\0\4\6\1\0"+
    "\3\6\36\0\1\351\31\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\1\6\1\352\11\6\1\0\4\6\1\0"+
    "\3\6\21\0\1\353\76\0\1\354\30\0\1\6\1\0"+
    "\2\6\6\0\1\353\4\0\6\6\1\0\13\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\2\6\1\355\10\6\1\0\4\6\1\0"+
    "\3\6\63\0\1\43\4\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\6\6\1\356\4\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\2\6\1\357\10\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\3\6\1\360"+
    "\7\6\1\0\4\6\1\0\3\6\50\0\2\361\37\0"+
    "\1\362\102\0\1\363\45\0\1\364\71\0\2\365\37\0"+
    "\1\366\103\0\1\367\46\0\1\370\51\0\1\371\66\0"+
    "\1\372\46\0\1\373\3\0\1\374\56\0\1\375\56\0"+
    "\1\376\70\0\1\377\56\0\2\u0100\71\0\1\u0101\21\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\11\6\1\u0102"+
    "\1\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\5\6\1\u0103\5\6\1\0"+
    "\4\6\1\0\3\6\43\0\1\u0104\24\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\6\6\1\u0105\4\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\3\6\1\u0106\7\6\1\0\4\6\1\0"+
    "\3\6\33\0\1\u0107\73\0\1\u0108\21\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\11\6\1\u0109\1\6\1\0"+
    "\4\6\1\0\3\6\7\0\1\6\1\0\2\6\13\0"+
    "\6\6\1\0\7\6\1\u010a\3\6\1\0\4\6\1\0"+
    "\3\6\7\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\13\6\1\0\2\6\1\u010b\1\6\1\0\3\6\50\0"+
    "\2\u010c\40\0\1\u010d\67\0\1\u010e\66\0\1\u010f\57\0"+
    "\1\u0110\43\0\1\u0111\62\0\1\u0112\40\0\1\u0113\122\0"+
    "\1\u0114\44\0\1\u0115\60\0\1\u0116\64\0\1\u0117\50\0"+
    "\2\u0118\62\0\1\u0119\57\0\1\u011a\65\0\1\u011b\24\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\6\6\1\u011c"+
    "\4\6\1\0\4\6\1\0\3\6\7\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\3\6\1\u011d\7\6\1\0"+
    "\4\6\1\0\3\6\44\0\1\u011e\23\0\1\6\1\0"+
    "\2\6\13\0\6\6\1\0\7\6\1\u011f\3\6\1\0"+
    "\4\6\1\0\3\6\34\0\2\u0120\32\0\1\6\1\0"+
    "\2\6\13\0\2\6\1\u0121\3\6\1\0\13\6\1\0"+
    "\4\6\1\0\3\6\32\0\1\u0122\40\0\1\u0123\115\0"+
    "\1\u0124\43\0\1\u0125\72\0\1\u0126\54\0\1\u0127\50\0"+
    "\1\u0128\67\0\1\u0129\62\0\1\u012a\45\0\1\u012b\70\0"+
    "\1\u012c\66\0\1\u012d\46\0\1\u012e\64\0\1\u012f\62\0"+
    "\1\u0130\27\0\1\6\1\0\2\6\13\0\6\6\1\0"+
    "\3\6\1\u0131\7\6\1\0\4\6\1\0\3\6\7\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\6\6\1\u0132"+
    "\4\6\1\0\4\6\1\0\3\6\36\0\1\u0133\31\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\7\6\1\u0134"+
    "\3\6\1\0\4\6\1\0\3\6\30\0\1\u0135\74\0"+
    "\1\u0136\60\0\1\u0137\26\0\1\u0138\104\0\1\u0139\61\0"+
    "\1\u013a\60\0\1\u013b\57\0\1\u013c\61\0\1\u013d\30\0"+
    "\1\6\1\0\2\6\13\0\6\6\1\0\7\6\1\u013e"+
    "\3\6\1\0\4\6\1\0\3\6\37\0\1\u013f\61\0"+
    "\1\u0140\62\0\1\u0141\64\0\1\u0142\65\0\1\u0143\45\0"+
    "\1\u0144\50\0\1\u0145\73\0\1\u0146\61\0\1\u0147\60\0"+
    "\1\u0148\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12446];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\7\11\1\1\1\11\22\1\2\11"+
    "\1\1\2\0\2\11\1\0\11\1\1\0\3\1\1\0"+
    "\1\1\2\0\1\11\13\1\2\0\4\1\1\0\1\1"+
    "\1\11\1\0\2\1\1\0\4\1\1\11\1\1\1\0"+
    "\3\1\2\0\2\1\2\0\5\1\1\0\7\1\2\0"+
    "\4\1\1\0\1\11\2\1\1\0\4\1\1\0\3\1"+
    "\2\0\1\1\2\0\5\1\1\0\4\1\1\0\3\1"+
    "\2\0\4\1\1\0\1\1\1\11\4\1\1\0\3\1"+
    "\1\11\11\0\1\1\2\0\4\1\1\0\4\1\1\0"+
    "\2\1\2\0\4\1\1\0\3\1\1\11\2\1\2\0"+
    "\1\11\1\0\1\11\14\0\1\11\1\0\4\1\1\0"+
    "\2\1\1\11\1\1\2\0\4\1\4\0\1\11\14\0"+
    "\2\1\1\0\2\1\1\0\1\11\3\1\1\11\1\0"+
    "\1\1\15\0\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\3\0\1\1\2\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\1\1\11\1\1\1\0\2\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //-------------------> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { javax.swing.JOptionPane.showMessageDialog(null, "Error Lexico: " + yytext());
          }
        case 71: break;
        case 2: 
          { return new Symbol(Simbolos.valDecimal, yycolumn, yyline, new String(yytext()));
          }
        case 72: break;
        case 3: 
          { return new Symbol(Simbolos.identificador, yycolumn, yyline, new String(yytext()));
          }
        case 73: break;
        case 4: 
          { return new Symbol(Simbolos.asignar, yycolumn, yyline, new String(yytext()));
          }
        case 74: break;
        case 5: 
          { return new Symbol(Simbolos.parL, yycolumn, yyline, new String(yytext()));
          }
        case 75: break;
        case 6: 
          { return new Symbol(Simbolos.parR, yycolumn, yyline, new String(yytext()));
          }
        case 76: break;
        case 7: 
          { return new Symbol(Simbolos.puntoComa, yycolumn, yyline, new String(yytext()));
          }
        case 77: break;
        case 8: 
          { return new Symbol(Simbolos.mas, yycolumn, yyline, new String(yytext()));
          }
        case 78: break;
        case 9: 
          { return new Symbol(Simbolos.menos, yycolumn, yyline, new String(yytext()));
          }
        case 79: break;
        case 10: 
          { return new Symbol(Simbolos.por, yycolumn, yyline, new String(yytext()));
          }
        case 80: break;
        case 11: 
          { return new Symbol(Simbolos.div, yycolumn, yyline, new String(yytext()));
          }
        case 81: break;
        case 12: 
          { return new Symbol(Simbolos.mayor, yycolumn, yyline, new String(yytext()));
          }
        case 82: break;
        case 13: 
          { return new Symbol(Simbolos.menor, yycolumn, yyline, new String(yytext()));
          }
        case 83: break;
        case 14: 
          { 
          }
        case 84: break;
        case 15: 
          { yybegin(YYINITIAL);
          }
        case 85: break;
        case 16: 
          { return new Symbol(Simbolos.stringcad, yycolumn, yyline, new String(yytext()));
          }
        case 86: break;
        case 17: 
          { yybegin(COMENT_MULTI);
          }
        case 87: break;
        case 18: 
          { return new Symbol(Simbolos.ct, yycolumn, yyline, new String(yytext()));
          }
        case 88: break;
        case 19: 
          { return new Symbol(Simbolos.cb, yycolumn, yyline, new String(yytext()));
          }
        case 89: break;
        case 20: 
          { return new Symbol(Simbolos.id, yycolumn, yyline, new String(yytext()));
          }
        case 90: break;
        case 21: 
          { yybegin(COMENT_SIMPLE);
          }
        case 91: break;
        case 22: 
          { return new Symbol(Simbolos.cjs, yycolumn, yyline, new String(yytext()));
          }
        case 92: break;
        case 23: 
          { return new Symbol(Simbolos.ccss, yycolumn, yyline, new String(yytext()));
          }
        case 93: break;
        case 24: 
          { return new Symbol(Simbolos.caja, yycolumn, yyline, new String(yytext()));
          }
        case 94: break;
        case 25: 
          { return new Symbol(Simbolos.alto, yycolumn, yyline, new String(yytext()));
          }
        case 95: break;
        case 26: 
          { return new Symbol(Simbolos.ruta, yycolumn, yyline, new String(yytext()));
          }
        case 96: break;
        case 27: 
          { System.out.println("chtml"); return new Symbol(Simbolos.chtml, yycolumn, yyline, new String(yytext()));
          }
        case 97: break;
        case 28: 
          { return new Symbol(Simbolos.click, yycolumn, yyline, new String(yytext()));
          }
        case 98: break;
        case 29: 
          { return new Symbol(Simbolos.texto, yycolumn, yyline, new String(yytext()));
          }
        case 99: break;
        case 30: 
          { return new Symbol(Simbolos.tabla, yycolumn, yyline, new String(yytext()));
          }
        case 100: break;
        case 31: 
          { return new Symbol(Simbolos.fila, yycolumn, yyline, new String(yytext()));
          }
        case 101: break;
        case 32: 
          { return new Symbol(Simbolos.ancho, yycolumn, yyline, new String(yytext()));
          }
        case 102: break;
        case 33: 
          { return new Symbol(Simbolos.boton, yycolumn, yyline, new String(yytext()));
          }
        case 103: break;
        case 34: 
          { return new Symbol(Simbolos.panel, yycolumn, yyline, new String(yytext()));
          }
        case 104: break;
        case 35: 
          { return new Symbol(Simbolos.grupo, yycolumn, yyline, new String(yytext()));
          }
        case 105: break;
        case 36: 
          { return new Symbol(Simbolos.valor, yycolumn, yyline, new String(yytext()));
          }
        case 106: break;
        case 37: 
          { System.out.println("Cuerpo"); return new Symbol(Simbolos.cuerpo, yycolumn, yyline, new String(yytext()));
          }
        case 107: break;
        case 38: 
          { return new Symbol(Simbolos.titulo, yycolumn, yyline, new String(yytext()));
          }
        case 108: break;
        case 39: 
          { return new Symbol(Simbolos.finct, yycolumn, yyline, new String(yytext()));
          }
        case 109: break;
        case 40: 
          { return new Symbol(Simbolos.fincb, yycolumn, yyline, new String(yytext()));
          }
        case 110: break;
        case 41: 
          { return new Symbol(Simbolos.imagen, yycolumn, yyline, new String(yytext()));
          }
        case 111: break;
        case 42: 
          { return new Symbol(Simbolos.enlace, yycolumn, yyline, new String(yytext()));
          }
        case 112: break;
        case 43: 
          { return new Symbol(Simbolos.opcion, yycolumn, yyline, new String(yytext()));
          }
        case 113: break;
        case 44: 
          { return new Symbol(Simbolos.textoa, yycolumn, yyline, new String(yytext()));
          }
        case 114: break;
        case 45: 
          { return new Symbol(Simbolos.fincjs, yycolumn, yyline, new String(yytext()));
          }
        case 115: break;
        case 46: 
          { return new Symbol(Simbolos.derecha, yycolumn, yyline, new String(yytext()));
          }
        case 116: break;
        case 47: 
          { return new Symbol(Simbolos.spinner, yycolumn, yyline, new String(yytext()));
          }
        case 117: break;
        case 48: 
          { return new Symbol(Simbolos.centrado, yycolumn, yyline, new String(yytext()));
          }
        case 118: break;
        case 49: 
          { return new Symbol(Simbolos.finccss, yycolumn, yyline, new String(yytext()));
          }
        case 119: break;
        case 50: 
          { return new Symbol(Simbolos.fincaja, yycolumn, yyline, new String(yytext()));
          }
        case 120: break;
        case 51: 
          { return new Symbol(Simbolos.alineado, yycolumn, yyline, new String(yytext()));
          }
        case 121: break;
        case 52: 
          { return new Symbol(Simbolos.finchtml, yycolumn, yyline, new String(yytext()));
          }
        case 122: break;
        case 53: 
          { return new Symbol(Simbolos.fintexto, yycolumn, yyline, new String(yytext()));
          }
        case 123: break;
        case 54: 
          { return new Symbol(Simbolos.fintabla, yycolumn, yyline, new String(yytext()));
          }
        case 124: break;
        case 55: 
          { return new Symbol(Simbolos.finfila, yycolumn, yyline, new String(yytext()));
          }
        case 125: break;
        case 56: 
          { return new Symbol(Simbolos.finboton, yycolumn, yyline, new String(yytext()));
          }
        case 126: break;
        case 57: 
          { return new Symbol(Simbolos.finpanel, yycolumn, yyline, new String(yytext()));
          }
        case 127: break;
        case 58: 
          { return new Symbol(Simbolos.izquierda, yycolumn, yyline, new String(yytext()));
          }
        case 128: break;
        case 59: 
          { return new Symbol(Simbolos.saltofin, yycolumn, yyline, new String(yytext()));
          }
        case 129: break;
        case 60: 
          { return new Symbol(Simbolos.cajatexto, yycolumn, yyline, new String(yytext()));
          }
        case 130: break;
        case 61: 
          { return new Symbol(Simbolos.fincuerpo, yycolumn, yyline, new String(yytext()));
          }
        case 131: break;
        case 62: 
          { return new Symbol(Simbolos.fintitulo, yycolumn, yyline, new String(yytext()));
          }
        case 132: break;
        case 63: 
          { return new Symbol(Simbolos.finimagen, yycolumn, yyline, new String(yytext()));
          }
        case 133: break;
        case 64: 
          { return new Symbol(Simbolos.finenlace, yycolumn, yyline, new String(yytext()));
          }
        case 134: break;
        case 65: 
          { return new Symbol(Simbolos.finopcion, yycolumn, yyline, new String(yytext()));
          }
        case 135: break;
        case 66: 
          { System.out.println("encabezado"); return new Symbol(Simbolos.encabezado, yycolumn, yyline, new String(yytext()));
          }
        case 136: break;
        case 67: 
          { return new Symbol(Simbolos.fintextoa, yycolumn, yyline, new String(yytext()));
          }
        case 137: break;
        case 68: 
          { return new Symbol(Simbolos.finspinner, yycolumn, yyline, new String(yytext()));
          }
        case 138: break;
        case 69: 
          { return new Symbol(Simbolos.fincajatexto, yycolumn, yyline, new String(yytext()));
          }
        case 139: break;
        case 70: 
          { return new Symbol(Simbolos.finencabezado, yycolumn, yyline, new String(yytext()));
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
