/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*----------------------------------------------------------------------------
----------------------------------------- Area de Codigo de Usuario
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
package Analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/Analizadores/lexico2.jflex</tt>
 */
public class LexicoCSS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\56\1\61\1\57\1\54\22\0\1\60\1\0\1\5"+
    "\4\0\1\0\1\7\1\10\1\20\1\16\1\13\1\17\1\2\1\21"+
    "\1\1\1\1\10\1\1\14\1\15\1\0\1\6\3\0\1\31\1\46"+
    "\1\42\1\37\1\34\1\27\1\22\1\52\1\44\1\53\1\3\1\33"+
    "\1\30\1\36\1\26\1\25\1\50\1\23\1\41\1\32\1\24\1\47"+
    "\1\3\1\35\1\45\1\51\1\11\1\0\1\12\1\0\1\4\1\0"+
    "\1\31\1\46\1\42\1\37\1\34\1\27\1\22\1\52\1\44\1\53"+
    "\1\3\1\33\1\30\1\36\1\26\1\25\1\50\1\23\1\41\1\32"+
    "\1\24\1\47\1\3\1\35\1\45\1\51\1\0\1\55\10\0\1\61"+
    "\113\0\1\3\37\0\1\3\76\0\2\43\115\0\1\40\u1ea8\0\1\61"+
    "\1\61\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\11\3\1\1\2\3\1\1\5\3\2\20\1\21"+
    "\1\20\2\0\1\22\1\23\1\24\5\3\1\0\11\3"+
    "\1\0\5\3\1\25\1\0\1\25\3\3\1\0\3\3"+
    "\1\0\1\2\6\3\1\0\2\3\1\0\7\3\1\0"+
    "\5\3\2\0\4\3\1\0\2\3\1\0\1\3\1\0"+
    "\4\3\1\0\2\3\1\0\2\3\1\0\1\3\1\26"+
    "\6\3\1\0\1\3\1\0\2\3\1\0\2\3\2\0"+
    "\4\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\27\3\3\2\30\1\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\31\1\32\1\0\2\3\1\0\1\3\1\0"+
    "\2\3\1\0\2\3\2\0\2\3\1\33\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\34"+
    "\2\3\1\0\1\3\1\0\2\3\1\0\1\3\1\35"+
    "\1\3\1\0\2\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\36\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\2\3\1\0\1\3\1\37"+
    "\1\0\1\3\2\40\1\3\1\0\1\3\1\0\2\3"+
    "\2\0\2\3\1\0\1\3\2\41\1\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\1\3\2\42"+
    "\1\3\2\43\1\0\2\3\1\0\1\3\1\0\1\44"+
    "\2\0\2\3\2\45\1\0\1\3\1\0\2\3\2\46"+
    "\2\47\1\0\2\3\1\0\1\3\1\50\1\0\1\3"+
    "\1\51\1\0\1\52\1\3\1\52\1\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\1\0\1\3\2\53"+
    "\2\54\1\0\2\3\1\0\1\3\1\55\1\0\1\3"+
    "\2\56\2\57\1\3\1\0\1\3\1\0\1\3\1\60"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\2\61\2\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\226\0\226"+
    "\0\u0546\0\u0578\0\u012c\0\226\0\226\0\226\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0578\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\372\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\372\0\u1a5e\0\u1a90\0\u1ac2\0\226\0\372"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52"+
    "\0\u1c84\0\372\0\372\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e"+
    "\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\372\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\372\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\372\0\u2328"+
    "\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8"+
    "\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648"+
    "\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8"+
    "\0\u280a\0\372\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936"+
    "\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\372\0\u2a62\0\u2a94"+
    "\0\226\0\372\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0"+
    "\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\226\0\372"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c"+
    "\0\u2eae\0\u2ee0\0\u2f12\0\226\0\372\0\u2f44\0\226\0\372"+
    "\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\372\0\u30a2"+
    "\0\u30d4\0\u3106\0\u3138\0\226\0\372\0\u316a\0\u319c\0\u31ce"+
    "\0\u3200\0\u3232\0\226\0\372\0\226\0\372\0\u3264\0\u3296"+
    "\0\u32c8\0\u32fa\0\u332c\0\372\0\u335e\0\u3390\0\226\0\u33c2"+
    "\0\226\0\u33f4\0\372\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee"+
    "\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\226"+
    "\0\372\0\226\0\372\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746"+
    "\0\372\0\u3778\0\u37aa\0\226\0\372\0\226\0\372\0\u37dc"+
    "\0\u380e\0\u3840\0\u3872\0\u38a4\0\372\0\u38d6\0\u3908\0\u393a"+
    "\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\226\0\372\0\226"+
    "\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\4\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\3\6\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\6\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\6\1\42\1\43\2\6\1\44\1\45"+
    "\1\46\1\4\3\47\1\0\56\47\1\50\23\47\1\51"+
    "\33\47\1\0\1\47\2\0\1\47\64\0\1\5\1\52"+
    "\60\0\1\6\1\0\2\6\15\0\16\6\1\0\2\6"+
    "\1\0\10\6\6\0\5\53\1\54\54\53\20\0\1\55"+
    "\1\56\41\0\1\6\1\0\2\6\15\0\1\6\1\57"+
    "\14\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\3\6\1\60\12\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\4\6\1\61"+
    "\2\6\1\62\6\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\7\6\1\63\6\6\1\0"+
    "\2\6\1\64\1\65\7\6\7\0\1\6\1\0\2\6"+
    "\15\0\2\6\1\66\6\6\1\67\4\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\1\6"+
    "\1\70\5\6\1\71\2\6\1\72\3\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\12\6"+
    "\1\73\3\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\12\6\1\74\3\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\12\6"+
    "\1\75\3\6\1\0\2\6\1\0\10\6\42\0\1\76"+
    "\26\0\1\6\1\0\2\6\15\0\12\6\1\77\3\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\2\6\1\100\1\6\1\101\2\6\1\102\2\6"+
    "\1\103\3\6\1\0\2\6\1\0\10\6\45\0\1\104"+
    "\11\0\1\105\11\0\1\6\1\0\2\6\15\0\15\6"+
    "\1\106\1\0\2\6\1\0\5\6\1\107\2\6\7\0"+
    "\1\6\1\0\2\6\15\0\4\6\1\110\11\6\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\12\6\1\111\3\6\1\0\2\6\1\112\1\113\7\6"+
    "\7\0\1\6\1\0\2\6\15\0\4\6\1\114\11\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\2\6\1\115\13\6\1\0\2\6\1\0\10\6"+
    "\63\0\1\116\25\0\1\50\41\0\1\117\61\0\1\6"+
    "\1\0\2\6\15\0\2\6\1\120\13\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\7\6"+
    "\1\121\6\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\1\6\1\122\12\6\1\123\1\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\11\6\1\124\4\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\16\6\1\0\2\6"+
    "\1\0\1\6\1\125\6\6\44\0\1\126\24\0\1\6"+
    "\1\0\2\6\15\0\14\6\1\127\1\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\10\6"+
    "\1\130\5\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\16\6\1\0\2\6\1\131\1\132"+
    "\7\6\7\0\1\6\1\0\2\6\15\0\2\6\1\133"+
    "\13\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\6\6\1\134\7\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\13\6\1\135"+
    "\2\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\10\6\1\136\5\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\1\137\15\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\1\6\1\140\14\6\1\0\2\6\1\0\10\6"+
    "\41\0\1\141\27\0\1\6\1\0\2\6\15\0\11\6"+
    "\1\142\4\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\1\6\1\143\14\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\11\6"+
    "\1\144\4\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\3\6\1\145\12\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\14\6"+
    "\1\146\1\6\1\0\2\6\1\0\10\6\42\0\1\147"+
    "\75\0\1\150\12\0\1\6\1\0\2\6\15\0\12\6"+
    "\1\151\3\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\16\6\1\0\2\6\1\0\4\6"+
    "\1\152\3\6\7\0\1\6\1\0\2\6\15\0\1\6"+
    "\1\153\14\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\1\6\1\154\14\6\1\0\2\6"+
    "\1\0\10\6\46\0\2\155\21\0\1\6\1\0\2\6"+
    "\15\0\16\6\1\155\1\156\1\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\1\6\1\157\14\6\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\16\6\1\160\1\161\1\6\1\0\10\6\64\0\1\162"+
    "\4\0\1\6\1\0\2\6\15\0\3\6\1\163\12\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\16\6\1\0\2\6\1\0\4\6\1\164\3\6"+
    "\7\0\1\6\1\0\2\6\15\0\6\6\1\165\7\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\15\6\1\166\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\16\6\1\167\1\170\1\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\2\6"+
    "\1\171\13\6\1\0\2\6\1\0\10\6\32\0\1\172"+
    "\36\0\1\6\1\0\2\6\15\0\2\6\1\173\13\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\4\6\1\174\11\6\1\0\2\6\1\0\10\6"+
    "\44\0\1\175\24\0\1\6\1\0\2\6\15\0\14\6"+
    "\1\176\1\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\12\6\1\177\3\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\10\6"+
    "\1\200\1\6\1\201\3\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\10\6\1\202\5\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\1\6\1\203\14\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\1\6\1\204\14\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\12\6\1\205\3\6\1\0\2\6\1\0\10\6"+
    "\42\0\1\206\26\0\1\6\1\0\2\6\15\0\12\6"+
    "\1\207\3\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\16\6\1\210\1\211\1\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\4\6\1\212"+
    "\11\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\16\6\1\0\2\6\1\213\1\214\7\6"+
    "\7\0\1\6\1\0\2\6\15\0\10\6\1\215\5\6"+
    "\1\0\2\6\1\0\10\6\41\0\1\216\52\0\1\217"+
    "\36\0\1\6\1\0\2\6\15\0\11\6\1\220\4\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\2\6\1\221\13\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\15\6\1\222\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\10\6\1\223\5\6\1\0\2\6\1\0\10\6\51\0"+
    "\2\224\16\0\1\6\1\0\2\6\15\0\16\6\1\0"+
    "\2\6\1\224\1\225\7\6\7\0\1\6\1\0\2\6"+
    "\15\0\16\6\1\0\2\6\1\226\1\227\7\6\40\0"+
    "\1\230\30\0\1\6\1\0\2\6\15\0\10\6\1\231"+
    "\5\6\1\0\2\6\1\0\10\6\63\0\1\232\5\0"+
    "\1\6\1\0\2\6\15\0\4\6\1\233\11\6\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\2\6\1\234\13\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\7\6\1\235\6\6\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\4\6\1\236\11\6\1\0\2\6\1\0\10\6\42\0"+
    "\1\237\26\0\1\6\1\0\2\6\15\0\12\6\1\240"+
    "\3\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\16\6\1\241\1\242\1\6\1\0\10\6"+
    "\46\0\2\243\21\0\1\6\1\0\2\6\15\0\16\6"+
    "\1\243\1\244\1\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\1\6\1\245\14\6\1\0\2\6\1\0"+
    "\10\6\42\0\1\246\26\0\1\6\1\0\2\6\15\0"+
    "\12\6\1\247\3\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\12\6\1\250\3\6\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\11\6\1\251\4\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\4\6\1\252\11\6\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\7\6\1\253\6\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\16\6\1\0\2\6\1\254"+
    "\1\255\7\6\7\0\1\6\1\0\2\6\15\0\16\6"+
    "\1\0\1\6\1\256\1\0\10\6\50\0\1\257\20\0"+
    "\1\6\1\0\2\6\15\0\16\6\1\0\1\6\1\260"+
    "\1\0\10\6\51\0\2\261\16\0\1\6\1\0\2\6"+
    "\15\0\16\6\1\0\2\6\1\261\1\262\7\6\7\0"+
    "\1\6\1\0\2\6\15\0\1\6\1\263\14\6\1\0"+
    "\2\6\1\0\10\6\40\0\1\264\30\0\1\6\1\0"+
    "\2\6\15\0\10\6\1\265\5\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\1\6\1\266"+
    "\14\6\1\0\2\6\1\0\10\6\42\0\1\267\70\0"+
    "\2\270\16\0\1\6\1\0\2\6\15\0\12\6\1\271"+
    "\3\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\16\6\1\0\2\6\1\270\1\272\7\6"+
    "\7\0\1\6\1\0\2\6\15\0\12\6\1\273\3\6"+
    "\1\0\2\6\1\0\10\6\7\0\1\6\1\0\2\6"+
    "\15\0\16\6\1\0\2\6\1\274\1\275\7\6\54\0"+
    "\1\276\14\0\1\6\1\0\2\6\15\0\16\6\1\0"+
    "\2\6\1\0\2\6\1\277\5\6\57\0\1\300\11\0"+
    "\1\6\1\0\2\6\15\0\16\6\1\0\2\6\1\0"+
    "\5\6\1\301\2\6\51\0\2\302\16\0\1\6\1\0"+
    "\2\6\15\0\16\6\1\0\2\6\1\302\1\303\7\6"+
    "\62\0\1\304\6\0\1\6\1\0\2\6\15\0\12\6"+
    "\1\305\3\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\10\6\1\306\5\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\12\6"+
    "\1\307\3\6\1\0\2\6\1\0\10\6\50\0\1\310"+
    "\20\0\1\6\1\0\2\6\15\0\16\6\1\0\1\6"+
    "\1\311\1\0\10\6\50\0\1\312\20\0\1\6\1\0"+
    "\2\6\15\0\16\6\1\0\1\6\1\313\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\12\6\1\314\3\6"+
    "\1\0\2\6\1\0\10\6\37\0\1\315\31\0\1\6"+
    "\1\0\2\6\15\0\7\6\1\316\6\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\13\6"+
    "\1\317\2\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\12\6\1\320\3\6\1\0\2\6"+
    "\1\0\10\6\41\0\1\321\27\0\1\6\1\0\2\6"+
    "\15\0\11\6\1\322\4\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\16\6\1\0\2\6"+
    "\1\0\6\6\1\323\1\6\40\0\1\324\30\0\1\6"+
    "\1\0\2\6\15\0\10\6\1\325\5\6\1\0\2\6"+
    "\1\0\10\6\55\0\1\326\13\0\1\6\1\0\2\6"+
    "\15\0\16\6\1\0\2\6\1\0\3\6\1\327\4\6"+
    "\7\0\1\6\1\0\2\6\15\0\10\6\1\330\5\6"+
    "\1\331\1\332\1\6\1\0\10\6\37\0\1\333\31\0"+
    "\1\6\1\0\2\6\15\0\7\6\1\334\6\6\1\0"+
    "\2\6\1\0\10\6\7\0\1\6\1\0\2\6\15\0"+
    "\7\6\1\335\6\6\1\0\2\6\1\0\10\6\36\0"+
    "\1\336\65\0\1\337\26\0\1\6\1\0\2\6\15\0"+
    "\6\6\1\340\7\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\12\6\1\341\3\6\1\0"+
    "\2\6\1\0\10\6\50\0\1\342\20\0\1\6\1\0"+
    "\2\6\15\0\16\6\1\0\1\6\1\343\1\0\10\6"+
    "\41\0\1\344\27\0\1\6\1\0\2\6\15\0\11\6"+
    "\1\345\4\6\1\0\2\6\1\0\10\6\34\0\1\346"+
    "\34\0\1\6\1\0\2\6\15\0\4\6\1\347\11\6"+
    "\1\0\2\6\1\0\10\6\35\0\1\350\33\0\1\6"+
    "\1\0\2\6\15\0\5\6\1\351\10\6\1\0\2\6"+
    "\1\0\10\6\64\0\1\47\4\0\1\6\1\0\2\6"+
    "\15\0\4\6\1\352\11\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\11\6\1\353\4\6"+
    "\1\0\2\6\1\0\10\6\32\0\1\354\36\0\1\6"+
    "\1\0\2\6\15\0\2\6\1\355\13\6\1\0\2\6"+
    "\1\0\10\6\32\0\1\356\36\0\1\6\1\0\2\6"+
    "\15\0\2\6\1\357\13\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\15\6\1\360\1\0"+
    "\2\6\1\0\10\6\45\0\1\361\23\0\1\6\1\0"+
    "\2\6\15\0\15\6\1\362\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\6\6\1\363\7\6"+
    "\1\0\2\6\1\0\10\6\41\0\1\364\27\0\1\6"+
    "\1\0\2\6\15\0\11\6\1\365\4\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\7\6"+
    "\1\366\6\6\1\0\2\6\1\0\10\6\40\0\1\367"+
    "\30\0\1\6\1\0\2\6\15\0\10\6\1\370\5\6"+
    "\1\0\2\6\1\0\10\6\37\0\1\371\31\0\1\6"+
    "\1\0\2\6\15\0\7\6\1\372\6\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\12\6"+
    "\1\373\3\6\1\0\2\6\1\0\10\6\42\0\1\374"+
    "\26\0\1\6\1\0\2\6\15\0\12\6\1\375\3\6"+
    "\1\0\2\6\1\0\10\6\41\0\1\376\27\0\1\6"+
    "\1\0\2\6\15\0\11\6\1\377\4\6\1\0\2\6"+
    "\1\0\10\6\7\0\1\6\1\0\2\6\15\0\15\6"+
    "\1\u0100\1\0\2\6\1\0\10\6\42\0\1\u0101\50\0"+
    "\1\u0102\37\0\1\6\1\0\2\6\15\0\12\6\1\u0103"+
    "\3\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\1\6\1\u0104\14\6\1\0\2\6\1\0"+
    "\10\6\37\0\1\u0105\31\0\1\6\1\0\2\6\15\0"+
    "\7\6\1\u0106\6\6\1\0\2\6\1\0\10\6\42\0"+
    "\1\u0107\26\0\1\6\1\0\2\6\15\0\12\6\1\u0108"+
    "\3\6\1\0\2\6\1\0\10\6\44\0\1\u0109\24\0"+
    "\1\6\1\0\2\6\15\0\14\6\1\u010a\1\6\1\0"+
    "\2\6\1\0\10\6\51\0\2\u010b\16\0\1\6\1\0"+
    "\2\6\15\0\16\6\1\0\2\6\1\u010b\1\u010c\7\6"+
    "\7\0\1\6\1\0\2\6\15\0\12\6\1\u010d\3\6"+
    "\1\0\2\6\1\0\10\6\41\0\1\u010e\27\0\1\6"+
    "\1\0\2\6\15\0\11\6\1\u010f\4\6\1\0\2\6"+
    "\1\0\10\6\41\0\1\u0110\27\0\1\6\1\0\2\6"+
    "\15\0\11\6\1\u0111\4\6\1\0\2\6\1\0\10\6"+
    "\7\0\1\6\1\0\2\6\15\0\16\6\1\0\2\6"+
    "\1\u0112\1\u0113\7\6\34\0\1\u0114\34\0\1\6\1\0"+
    "\2\6\15\0\4\6\1\u0115\11\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\12\6\1\u0116"+
    "\3\6\1\0\2\6\1\0\10\6\37\0\1\u0117\31\0"+
    "\1\6\1\0\2\6\15\0\7\6\1\u0118\6\6\1\0"+
    "\2\6\1\0\10\6\42\0\1\u0119\26\0\1\6\1\0"+
    "\2\6\15\0\12\6\1\u011a\3\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\13\6\1\u011b"+
    "\2\6\1\0\2\6\1\0\10\6\41\0\1\u011c\27\0"+
    "\1\6\1\0\2\6\15\0\11\6\1\u011d\4\6\1\0"+
    "\2\6\1\0\10\6\25\0\1\u011e\43\0\1\6\1\0"+
    "\2\6\12\0\1\u011e\2\0\16\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\4\6\1\u011f"+
    "\11\6\1\0\2\6\1\0\10\6\44\0\1\u0120\62\0"+
    "\1\u0121\23\0\1\6\1\0\2\6\15\0\14\6\1\u0122"+
    "\1\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\15\6\1\u0123\1\0\2\6\1\0\10\6"+
    "\41\0\1\u0124\27\0\1\6\1\0\2\6\15\0\11\6"+
    "\1\u0125\4\6\1\0\2\6\1\0\10\6\40\0\1\u0126"+
    "\30\0\1\6\1\0\2\6\15\0\10\6\1\u0127\5\6"+
    "\1\0\2\6\1\0\10\6\50\0\1\u0128\20\0\1\6"+
    "\1\0\2\6\15\0\16\6\1\0\1\6\1\u0129\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\6\6\1\u012a"+
    "\7\6\1\0\2\6\1\0\10\6\37\0\1\u012b\31\0"+
    "\1\6\1\0\2\6\15\0\7\6\1\u012c\6\6\1\0"+
    "\2\6\1\0\10\6\37\0\1\u012d\31\0\1\6\1\0"+
    "\2\6\15\0\7\6\1\u012e\6\6\1\0\2\6\1\0"+
    "\10\6\36\0\1\u012f\32\0\1\6\1\0\2\6\15\0"+
    "\6\6\1\u0130\7\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\14\6\1\u0131\1\6\1\0"+
    "\2\6\1\0\10\6\43\0\1\u0132\25\0\1\6\1\0"+
    "\2\6\15\0\13\6\1\u0133\2\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\10\6\1\u0134"+
    "\5\6\1\0\2\6\1\0\10\6\42\0\1\u0135\26\0"+
    "\1\6\1\0\2\6\15\0\12\6\1\u0136\3\6\1\0"+
    "\2\6\1\0\10\6\40\0\1\u0137\61\0\1\u0138\60\0"+
    "\1\u0139\31\0\1\6\1\0\2\6\15\0\10\6\1\u013a"+
    "\5\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\7\6\1\u013b\6\6\1\0\2\6\1\0"+
    "\10\6\37\0\1\u013c\31\0\1\6\1\0\2\6\15\0"+
    "\7\6\1\u013d\6\6\1\0\2\6\1\0\10\6\37\0"+
    "\1\u013e\31\0\1\6\1\0\2\6\15\0\7\6\1\u013f"+
    "\6\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\12\6\1\u0140\3\6\1\0\2\6\1\0"+
    "\10\6\42\0\1\u0141\26\0\1\6\1\0\2\6\15\0"+
    "\12\6\1\u0142\3\6\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\10\6\1\u0143\5\6\1\0"+
    "\2\6\1\0\10\6\40\0\1\u0144\30\0\1\6\1\0"+
    "\2\6\15\0\10\6\1\u0145\5\6\1\0\2\6\1\0"+
    "\10\6\50\0\1\u0146\20\0\1\6\1\0\2\6\15\0"+
    "\16\6\1\0\1\6\1\u0147\1\0\10\6\34\0\1\u0148"+
    "\34\0\1\6\1\0\2\6\15\0\4\6\1\u0149\11\6"+
    "\1\0\2\6\1\0\10\6\41\0\1\u014a\27\0\1\6"+
    "\1\0\2\6\15\0\11\6\1\u014b\4\6\1\0\2\6"+
    "\1\0\10\6\45\0\1\u014c\23\0\1\6\1\0\2\6"+
    "\15\0\15\6\1\u014d\1\0\2\6\1\0\10\6\7\0"+
    "\1\6\1\0\2\6\15\0\14\6\1\u014e\1\6\1\0"+
    "\2\6\1\0\10\6\44\0\1\u014f\24\0\1\6\1\0"+
    "\2\6\15\0\14\6\1\u0150\1\6\1\0\2\6\1\0"+
    "\10\6\7\0\1\6\1\0\2\6\15\0\4\6\1\u0151"+
    "\11\6\1\0\2\6\1\0\10\6\50\0\1\u0152\20\0"+
    "\1\6\1\0\2\6\15\0\16\6\1\0\1\6\1\u0153"+
    "\1\0\10\6\40\0\1\u0154\30\0\1\6\1\0\2\6"+
    "\15\0\10\6\1\u0155\5\6\1\0\2\6\1\0\10\6"+
    "\34\0\1\u0156\34\0\1\6\1\0\2\6\15\0\4\6"+
    "\1\u0157\11\6\1\0\2\6\1\0\10\6\7\0\1\6"+
    "\1\0\2\6\15\0\10\6\1\u0158\5\6\1\0\2\6"+
    "\1\0\10\6\46\0\2\u0159\21\0\1\6\1\0\2\6"+
    "\15\0\16\6\1\u0159\1\u015a\1\6\1\0\10\6\34\0"+
    "\1\u015b\34\0\1\6\1\0\2\6\15\0\4\6\1\u015c"+
    "\11\6\1\0\2\6\1\0\10\6\7\0\1\6\1\0"+
    "\2\6\15\0\4\6\1\u015d\11\6\1\0\2\6\1\0"+
    "\10\6\51\0\2\u015e\16\0\1\6\1\0\2\6\15\0"+
    "\16\6\1\0\2\6\1\u015e\1\u015f\7\6\41\0\1\u0160"+
    "\27\0\1\6\1\0\2\6\15\0\11\6\1\u0161\4\6"+
    "\1\0\2\6\1\0\10\6\34\0\1\u0162\34\0\1\6"+
    "\1\0\2\6\15\0\4\6\1\u0163\11\6\1\0\2\6"+
    "\1\0\10\6\34\0\1\u0164\34\0\1\6\1\0\2\6"+
    "\15\0\4\6\1\u0165\11\6\1\0\2\6\1\0\10\6"+
    "\44\0\1\u0166\24\0\1\6\1\0\2\6\15\0\14\6"+
    "\1\u0167\1\6\1\0\2\6\1\0\10\6\31\0\1\u0168"+
    "\37\0\1\6\1\0\2\6\15\0\1\6\1\u0169\14\6"+
    "\1\0\2\6\1\0\10\6\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\13\11\24\1\2\11\1\1\2\0"+
    "\3\11\5\1\1\0\11\1\1\0\6\1\1\0\4\1"+
    "\1\0\3\1\1\0\7\1\1\0\2\1\1\0\7\1"+
    "\1\0\5\1\2\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\0\4\1\1\0\2\1\1\0\2\1\1\0\10\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\2\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\2\0\3\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\2\1\2\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\0\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //-------------------> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoCSS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicoCSS(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { javax.swing.JOptionPane.showMessageDialog(null, "Error Lexico: " + yytext());
          }
        case 51: break;
        case 2: 
          { return new Symbol(SimbolosCSS.valDecimal, yycolumn, yyline, new String(yytext()));
          }
        case 52: break;
        case 3: 
          { return new Symbol(SimbolosCSS.identificador, yycolumn, yyline, new String(yytext()));
          }
        case 53: break;
        case 4: 
          { return new Symbol(SimbolosCSS.asignar, yycolumn, yyline, new String(yytext()));
          }
        case 54: break;
        case 5: 
          { return new Symbol(SimbolosCSS.parL, yycolumn, yyline, new String(yytext()));
          }
        case 55: break;
        case 6: 
          { return new Symbol(SimbolosCSS.parR, yycolumn, yyline, new String(yytext()));
          }
        case 56: break;
        case 7: 
          { return new Symbol(SimbolosCSS.corchL, yycolumn, yyline, new String(yytext()));
          }
        case 57: break;
        case 8: 
          { return new Symbol(SimbolosCSS.corchR, yycolumn, yyline, new String(yytext()));
          }
        case 58: break;
        case 9: 
          { return new Symbol(SimbolosCSS.coma, yycolumn, yyline, new String(yytext()));
          }
        case 59: break;
        case 10: 
          { return new Symbol(SimbolosCSS.dosPuntos, yycolumn, yyline, new String(yytext()));
          }
        case 60: break;
        case 11: 
          { return new Symbol(SimbolosCSS.puntoComa, yycolumn, yyline, new String(yytext()));
          }
        case 61: break;
        case 12: 
          { return new Symbol(SimbolosCSS.mas, yycolumn, yyline, new String(yytext()));
          }
        case 62: break;
        case 13: 
          { return new Symbol(SimbolosCSS.menos, yycolumn, yyline, new String(yytext()));
          }
        case 63: break;
        case 14: 
          { return new Symbol(SimbolosCSS.por, yycolumn, yyline, new String(yytext()));
          }
        case 64: break;
        case 15: 
          { return new Symbol(SimbolosCSS.div, yycolumn, yyline, new String(yytext()));
          }
        case 65: break;
        case 16: 
          { 
          }
        case 66: break;
        case 17: 
          { yybegin(YYINITIAL);
          }
        case 67: break;
        case 18: 
          { return new Symbol(SimbolosCSS.stringcad, yycolumn, yyline, new String(yytext()));
          }
        case 68: break;
        case 19: 
          { yybegin(COMENT_MULTI);
          }
        case 69: break;
        case 20: 
          { yybegin(COMENT_SIMPLE);
          }
        case 70: break;
        case 21: 
          { return new Symbol(SimbolosCSS.id, yycolumn, yyline, new String(yytext()));
          }
        case 71: break;
        case 22: 
          { return new Symbol(SimbolosCSS.truebool, yycolumn, yyline, new String(yytext()));
          }
        case 72: break;
        case 23: 
          { return new Symbol(SimbolosCSS.grupoe, yycolumn, yyline, new String(yytext()));
          }
        case 73: break;
        case 24: 
          { return new Symbol(SimbolosCSS.falsebool, yycolumn, yyline, new String(yytext()));
          }
        case 74: break;
        case 25: 
          { return new Symbol(SimbolosCSS.texto, yycolumn, yyline, new String(yytext()));
          }
        case 75: break;
        case 26: 
          { return new Symbol(SimbolosCSS.letra, yycolumn, yyline, new String(yytext()));
          }
        case 76: break;
        case 27: 
          { return new Symbol(SimbolosCSS.borde, yycolumn, yyline, new String(yytext()));
          }
        case 77: break;
        case 28: 
          { return new Symbol(SimbolosCSS.opaque, yycolumn, yyline, new String(yytext()));
          }
        case 78: break;
        case 29: 
          { return new Symbol(SimbolosCSS.tamtex, yycolumn, yyline, new String(yytext()));
          }
        case 79: break;
        case 30: 
          { return new Symbol(SimbolosCSS.formato, yycolumn, yyline, new String(yytext()));
          }
        case 80: break;
        case 31: 
          { return new Symbol(SimbolosCSS.derecha, yycolumn, yyline, new String(yytext()));
          }
        case 81: break;
        case 32: 
          { return new Symbol(SimbolosCSS.cursiva, yycolumn, yyline, new String(yytext()));
          }
        case 82: break;
        case 33: 
          { return new Symbol(SimbolosCSS.visible, yycolumn, yyline, new String(yytext()));
          }
        case 83: break;
        case 34: 
          { return new Symbol(SimbolosCSS.alineado, yycolumn, yyline, new String(yytext()));
          }
        case 84: break;
        case 35: 
          { return new Symbol(SimbolosCSS.negrilla, yycolumn, yyline, new String(yytext()));
          }
        case 85: break;
        case 36: 
          { return new Symbol(SimbolosCSS.centrado, yycolumn, yyline, new String(yytext()));
          }
        case 86: break;
        case 37: 
          { return new Symbol(SimbolosCSS.vertical, yycolumn, yyline, new String(yytext()));
          }
        case 87: break;
        case 38: 
          { return new Symbol(SimbolosCSS.mayuscula, yycolumn, yyline, new String(yytext()));
          }
        case 88: break;
        case 39: 
          { return new Symbol(SimbolosCSS.minuscula, yycolumn, yyline, new String(yytext()));
          }
        case 89: break;
        case 40: 
          { return new Symbol(SimbolosCSS.colortext, yycolumn, yyline, new String(yytext()));
          }
        case 90: break;
        case 41: 
          { return new Symbol(SimbolosCSS.capitalt, yycolumn, yyline, new String(yytext()));
          }
        case 91: break;
        case 42: 
          { return new Symbol(SimbolosCSS.izquierda, yycolumn, yyline, new String(yytext()));
          }
        case 92: break;
        case 43: 
          { return new Symbol(SimbolosCSS.idelemento, yycolumn, yyline, new String(yytext()));
          }
        case 93: break;
        case 44: 
          { return new Symbol(SimbolosCSS.horizontal, yycolumn, yyline, new String(yytext()));
          }
        case 94: break;
        case 45: 
          { return new Symbol(SimbolosCSS.tamelemento, yycolumn, yyline, new String(yytext()));
          }
        case 95: break;
        case 46: 
          { return new Symbol(SimbolosCSS.colorselect, yycolumn, yyline, new String(yytext()));
          }
        case 96: break;
        case 47: 
          { return new Symbol(SimbolosCSS.justificado, yycolumn, yyline, new String(yytext()));
          }
        case 97: break;
        case 48: 
          { return new Symbol(SimbolosCSS.fondoelemento, yycolumn, yyline, new String(yytext()));
          }
        case 98: break;
        case 49: 
          { return new Symbol(SimbolosCSS.autoredimension, yycolumn, yyline, new String(yytext()));
          }
        case 99: break;
        case 50: 
          { return new Symbol(SimbolosCSS.selecttextcolor, yycolumn, yyline, new String(yytext()));
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SimbolosCSS.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
